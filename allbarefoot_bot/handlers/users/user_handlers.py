import logging
import random
import json

from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import CommandStart
from aiogram.types import Message, CallbackQuery, ContentType, MediaGroup, InlineKeyboardButton, InlineKeyboardMarkup, LabeledPrice, PreCheckoutQuery
from aiogram.types.input_media import InputMediaPhoto
from aiogram.utils.exceptions import BotBlocked, ChatNotFound, BadRequest
import asyncio
import yahoo_fin.stock_info as si
from datetime import datetime, timedelta
import gspread_asyncio
from google.oauth2.service_account import Credentials

from data.config import admin_id
from data import config
from loader import dp
from states import states
from utils.db_api import quick_commands
from keyboards.inline import main_keyboards, order_keyboards
from handlers.users.cryptocloud import Payment



def convert_currency_yahoofin(src, dst, amount):
    symbol = f"{src}{dst}=X"
    live_price = si.get_live_price(symbol)
    return live_price * amount


def get_creds():
    creds = Credentials.from_service_account_file("allbarefoot-a3149ccc3f08.json")
    scoped = creds.with_scopes([
        'https://spreadsheets.google.com/feeds',
        'https://www.googleapis.com/auth/spreadsheets',
        'https://www.googleapis.com/auth/drive'
    ])
    return scoped


agcm = gspread_asyncio.AsyncioGspreadClientManager(get_creds)


async def check_google_sheets(agcm):
    agc = await agcm.authorize()
    ss = await agc.open_by_url(config.spreadsheet_url)
    worksheet = await ss.get_worksheet(0)

    return worksheet
    

# ----------------------------- B E L E N K A -----------------------------------


@dp.callback_query_handler(text='belenka_sale')
async def belenka_sale(call: CallbackQuery, state: FSMContext):
    await call.answer()
    text = await quick_commands.select_text_1vetka()
    msg = await call.message.edit_text(
        text=text, 
        reply_markup=main_keyboards.to_menu_keyboard,
        parse_mode='html',
        disable_web_page_preview=True
    )
    
    await state.update_data(msg_id=msg.message_id)
    await states.Belenka.LinkNameNumber.set()


@dp.message_handler(state=states.Belenka.LinkNameNumber)
async def linknameumber(message: Message, state: FSMContext):
    data = await state.get_data()

    await message.delete()
    await dp.bot.edit_message_text(
        chat_id=message.from_user.id, 
        message_id=data['msg_id'], 
        text="–í–∞—à–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—è –õ–ê–¢–ò–ù–°–ö–ò–ú–ò –±—É–∫–≤–∞–º–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ—Å—ã–ª–∫–∏", 
        reply_markup=main_keyboards.cancel_keyboard
    )

    await state.update_data(link_name_number=message.text)
    await states.Belenka.NameUser.set()


@dp.message_handler(state=states.Belenka.NameUser)
async def nameuser(message: Message, state: FSMContext):
    data = await state.get_data()

    await message.delete()
    await dp.bot.edit_message_text(
        chat_id=message.from_user.id, 
        message_id=data['msg_id'], 
        text="–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏ –õ–ê–¢–ò–ù–°–ö–ò–ú–ò –±—É–∫–≤–∞–º–∏ (—É–ª–∏—Ü–∞, –Ω–æ–º–µ—Ä –¥–æ–º–∞/–∫–≤–∞—Ä—Ç–∏—Ä—ã, –≥–æ—Ä–æ–¥, –æ–±–ª–∞—Å—Ç—å, –∏–Ω–¥–µ–∫—Å). –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞", 
        reply_markup=main_keyboards.cancel_keyboard
    )

    await state.update_data(name_user=message.text)
    await states.Belenka.Address.set()


@dp.message_handler(state=states.Belenka.Address)
async def address(message: Message, state: FSMContext):
    data = await state.get_data()

    await message.delete()
    await dp.bot.edit_message_text(
        chat_id=message.from_user.id, 
        message_id=data['msg_id'], 
        text="–í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", 
        reply_markup=main_keyboards.cancel_keyboard
    )

    await state.update_data(address=message.text)
    await states.Belenka.Phone.set()


@dp.message_handler(state=states.Belenka.Phone)
async def phone(message: Message, state: FSMContext):
    data = await state.get_data()

    await message.delete()
    await dp.bot.edit_message_text(
        chat_id=message.from_user.id, 
        message_id=data['msg_id'], 
        text="–ï—â—ë —Ä–∞–∑ –º–æ–¥–µ–ª—å –∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ (–¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –≤–æ –∏–∑–±–µ–∂–∞–Ω–∏–µ –æ—à–∏–±–∫–∏)", 
        reply_markup=main_keyboards.cancel_keyboard
    )

    await state.update_data(phone=message.text)
    await states.Belenka.ModelName.set()


@dp.message_handler(state=states.Belenka.ModelName)
async def modelname(message: Message, state: FSMContext):
    data = await state.get_data()

    await message.delete()
    await dp.bot.edit_message_text(
        chat_id=message.from_user.id, 
        message_id=data['msg_id'], 
        text="–¶–≤–µ—Ç –º–æ–¥–µ–ª–∏ (–∫–∞–∫ —É–∫–∞–∑–∞–Ω–æ –Ω–∞ —Å–∞–π—Ç–µ belenka)", 
        reply_markup=main_keyboards.cancel_keyboard
    )

    await state.update_data(model_name=message.text)
    await states.Belenka.ModelColor.set()


@dp.message_handler(state=states.Belenka.ModelColor)
async def modelcolor(message: Message, state: FSMContext):
    data = await state.get_data()

    await message.delete()
    await dp.bot.edit_message_text(
        chat_id=message.from_user.id, 
        message_id=data['msg_id'], 
        text="–†–∞–∑–º–µ—Ä –º–æ–¥–µ–ª–∏ (–ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ª–∏—á–∏–µ –Ω–∞ —Å–∞–π—Ç–µ!)", 
        reply_markup=main_keyboards.cancel_keyboard
    )

    await state.update_data(model_color=message.text)
    await states.Belenka.ModelSize.set()


@dp.message_handler(state=states.Belenka.ModelSize)
async def modelsize(message: Message, state: FSMContext):
    data = await state.get_data()

    await message.delete()
    await dp.bot.edit_message_text(
        chat_id=message.from_user.id, 
        message_id=data['msg_id'], 
        text="–°—Ç–æ–∏–º–æ—Å—Ç—å –º–æ–¥–µ–ª–∏ –≤ —Ä—É–±–ª—è—Ö, –ø—Ä–æ—Å—Ç–æ —á–∏—Å–ª–æ –±–µ–∑ –¥–æ–ø.—Å–∏–º–≤–æ–ª–æ–≤", 
        reply_markup=main_keyboards.cancel_keyboard
    )

    await state.update_data(model_size=message.text)
    await states.Belenka.ModelPrice.set()


@dp.message_handler(state=states.Belenka.ModelPrice)
async def modelprice(message: Message, state: FSMContext):
    data = await state.get_data()

    await message.delete()
    try:
        await dp.bot.edit_message_text(
            chat_id=message.from_user.id, 
            message_id=data['msg_id'], 
            text=f"–û–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–∞—è —Å—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ:\n<b>{int(message.text)}RUB</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∏–∂–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:", 
            reply_markup=main_keyboards.oplata_keyboard
        )
        await state.update_data(bonus=0, model_price=int(message.text))
        await states.Belenka.Screen.set()

    except ValueError:
        await dp.bot.edit_message_text(
            chat_id=message.from_user.id, 
            message_id=data['msg_id'], 
            text=f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ", 
            reply_markup=main_keyboards.cancel_keyboard
        )


@dp.callback_query_handler(text='tinkoff', state=states.Belenka.Screen)
async def tinkoff(call: CallbackQuery, state: FSMContext):
    await call.answer()
    text = await quick_commands.select_text_card()
    msg = await call.message.edit_text(
        text=text, 
        reply_markup=main_keyboards.cancel_keyboard,
        parse_mode='html'
    )
    
    await state.update_data(option='–ù–∞ –∫–∞—Ä—Ç—É', msg_id=msg.message_id)


@dp.callback_query_handler(text='SBP', state=states.Belenka.Screen)
async def sbp(call: CallbackQuery, state: FSMContext):
    await call.answer()
    text = await quick_commands.select_text_sbp()
    msg = await call.message.edit_text(
        text=text, 
        reply_markup=main_keyboards.cancel_keyboard,
        parse_mode='html'
    )
    
    await state.update_data(option='–°–ë–ü', msg_id=msg.message_id)


@dp.callback_query_handler(text='bonus', state=states.Belenka.Screen)
async def bonus(call: CallbackQuery, state: FSMContext):
    await call.answer()
    user = await quick_commands.select_user(call.from_user.id)
    if user.balance == 0:
        await call.message.edit_text(
            text='–í–∞—à –±–∞–ª–∞–Ω—Å –ø—É—Å—Ç! üòî', 
            reply_markup=main_keyboards.back_keyboard,
            parse_mode='html'
        )
    else:
        await call.message.edit_text(
            text=f'–í–∞—à –±–∞–ª–∞–Ω—Å - {user.balance}RUB\n\n–°–ø–∏—Å–∞—Ç—å –≤ —É—á—ë—Ç –ø–æ–∫—É–ø–∫–∏?', 
            reply_markup=main_keyboards.bonus_keyboard,
            parse_mode='html'
        )


@dp.callback_query_handler(text='back', state=states.Belenka.Screen)
async def modelprice(call: CallbackQuery, state: FSMContext):
    data = await state.get_data()

    await call.message.edit_text(
        text=f"–û–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–∞—è —Å—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ:\n<b>{data['model_price']}RUB</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∏–∂–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:", 
        reply_markup=main_keyboards.oplata_keyboard
    )


@dp.callback_query_handler(text='yes', state=states.Belenka.Screen)
async def modelprice(call: CallbackQuery, state: FSMContext):
    data = await state.get_data()

    user = await quick_commands.select_user(call.from_user.id)
    if user.balance >= int(data['model_price']):
        await quick_commands.update_user_balance(call.from_user.id, user.balance-int(data['model_price']))

        await call.message.edit_text("""–í–∞—à–∏ –±–æ–Ω—É—Å—ã —Å–ø–∏—Å–∞–Ω—ã!\n\n–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º –∏ –ë–ª–∞–≥–æ–î–∞—Ä–∏–º –∑–∞ –ø–æ–∫—É–ø–∫—É. 
üë£ –î–∞–ª–µ–µ –º—ã —Å–¥–µ–ª–∞–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω–æ–µ, —á—Ç–æ–±—ã –í–∞—à –±–æ—Å–æ–Ω–æ–≥–∏–π –ø–∞—Ä–∫ –∫–∞–∫ –º–æ–∂–Ω–æ –±—ã—Å—Ç—Ä–µ–µ –ø–æ–ø–æ–ª–Ω–∏–ª—Å—è –µ—â–µ –æ–¥–Ω–æ–π –ø—Ä–µ–∫—Ä–∞—Å–Ω–æ–π –ø–∞—Ä–æ–π. 
–ù–æ–º–µ—Ä —Ç—Ä–µ–∫–∞ —Å–æ–æ–±—â–∏–º –∑–¥–µ—Å—å –∂–µ.

C –ª—é–±–æ–≤—å—é, –ö–æ–º–∞–Ω–¥–∞ ALL Barefoot""", 
            reply_markup=main_keyboards.to_menu_keyboard
        )

        order = await quick_commands.add_order(
            user_id=call.from_user.id,
            time_created=datetime.now().strftime("%d.%m.%Y %H:%M"),
            link_name_number=data['link_name_number'], 
            name_user=data['name_user'], 
            address=data['address'], 
            phone=data['phone'], 
            model_name=data['model_name'], 
            model_color=data['model_color'], 
            model_size=data['model_size'], 
            model_price=str(data['model_price']),
            currency='USD',
            screen='–ë–æ–Ω—É—Å—ã',
            bonus=str(data['bonus'])
        )

        worksheet = await check_google_sheets(agcm)
        col1 = await worksheet.col_values(2)
        await worksheet.update_cell(len(col1)+1, 2, datetime.now().strftime("%d.%m.%Y %H:%M"))
        await worksheet.update_cell(len(col1)+1, 3, order.id)
        await worksheet.update_cell(len(col1)+1, 4, data['name_user'])
        await worksheet.update_cell(len(col1)+1, 5, data['address'])
        await worksheet.update_cell(len(col1)+1, 6, data['phone'])
        await worksheet.update_cell(len(col1)+1, 8, data['link_name_number'])
        await worksheet.update_cell(len(col1)+1, 9, data['model_name'])
        await worksheet.update_cell(len(col1)+1, 10, data['model_color'])
        await worksheet.update_cell(len(col1)+1, 11, data['model_size'])
        await worksheet.update_cell(len(col1)+1, 15, data['model_price'])
        await worksheet.update_cell(len(col1)+1, 16, data['bonus'])
        if call.from_user.username is not None:
            await worksheet.update_cell(len(col1)+1, 23, f't.me/{call.from_user.username}')
        await worksheet.update_cell(len(col1)+1, 24, call.from_user.id)
        await worksheet.update_cell(len(col1)+1, 25, '–ë–æ–Ω—É—Å—ã')

        await state.finish()

    else:

        await call.message.edit_text( 
            text=f"–í–∞—à–∏ –±–æ–Ω—É—Å—ã —Å–ø–∏—Å–∞–Ω—ã!", 
            reply_markup=main_keyboards.back_keyboard
        )

        await state.update_data(bonus=user.balance, model_price=str(int(data['model_price'])))
        await quick_commands.update_user_balance(0)


@dp.callback_query_handler(text='crypto', state=states.Belenka.Screen)
async def crypto(call: CallbackQuery, state: FSMContext):
    data = await state.get_data()

    amount = int(data['model_price'])

    price = convert_currency_yahoofin('RUB', "USD", amount)
    price = round(price, 2)

    payment = Payment(price)
    link = await payment.init
    uuid = payment.uuid
    await state.update_data(uuid=uuid, link=link, amount=price)
    markup = await order_keyboards.markup_pay(link)

    await call.message.edit_text('''üí∏ –í–∞—à–∞ —Å—Å—ã–ª–∫–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã: {link}

–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: ~ ${price}
–°—Å—ã–ª–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ 2-—Ö —á–∞—Å–æ–≤.

‚ö†Ô∏è –í–ê–ñ–ù–û! –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—É–º–º—É –Ω–µ –º–µ–Ω—å—à–µ —É–∫–∞–∑–∞–Ω–Ω–æ–π, –∏–Ω–∞—á–µ –≤—ã –Ω–µ –ø–æ–ª—É—á–∏—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã. –ó–∞–∫–ª–∞–¥—ã–≤–∞–π—Ç–µ —Ä–∞—Å—Ö–æ–¥—ã –Ω–∞ –∫–æ–º–∏—Å—Å–∏—é.'''.format(link=link, price=price), reply_markup=markup)


@dp.callback_query_handler(text='paid', state=states.Belenka.Screen)
async def paid(call: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    payment = Payment(uuid=data['uuid'], amount=data['amount'])
    user = await quick_commands.select_user(call.from_user.id)

    status = await payment.check_payment()
    try:
        if status == 'created':
            await call.answer('‚ùå –û–ø–ª–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!', show_alert=True)
        elif status == 'partial':
            await call.answer('‚ö†Ô∏è –í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –æ–ø–ª–∞—Ç—ã, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—â–µ!', show_alert=True)
        elif status == 'paid':
            await call.message.edit_text("""–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º –∏ –ë–ª–∞–≥–æ–î–∞—Ä–∏–º –∑–∞ –ø–æ–∫—É–ø–∫—É. 
üë£ –î–∞–ª–µ–µ –º—ã —Å–¥–µ–ª–∞–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω–æ–µ, —á—Ç–æ–±—ã –í–∞—à –±–æ—Å–æ–Ω–æ–≥–∏–π –ø–∞—Ä–∫ –∫–∞–∫ –º–æ–∂–Ω–æ –±—ã—Å—Ç—Ä–µ–µ –ø–æ–ø–æ–ª–Ω–∏–ª—Å—è –µ—â–µ –æ–¥–Ω–æ–π –ø—Ä–µ–∫—Ä–∞—Å–Ω–æ–π –ø–∞—Ä–æ–π. 
–ù–æ–º–µ—Ä —Ç—Ä–µ–∫–∞ —Å–æ–æ–±—â–∏–º –∑–¥–µ—Å—å –∂–µ.

C –ª—é–±–æ–≤—å—é, –ö–æ–º–∞–Ω–¥–∞ ALL Barefoot""", 
                reply_markup=main_keyboards.to_menu_keyboard
            )

            order = await quick_commands.add_order(
                user_id=call.from_user.id,
                time_created=datetime.now().strftime("%d.%m.%Y %H:%M"),
                link_name_number=data['link_name_number'], 
                name_user=data['name_user'], 
                address=data['address'], 
                phone=data['phone'], 
                model_name=data['model_name'], 
                model_color=data['model_color'], 
                model_size=data['model_size'], 
                model_price=str(data['model_price']),
                currency='USD',
                screen='–ß–µ—Ä–µ–∑ –∫—Ä–∏–ø—Ç—É',
                bonus=str(data['bonus'])
            )

            setts = await quick_commands.select_settings()
            percent = setts.percent

            user = await quick_commands.select_user(call.from_user.id)
            if user.referer is not None:
                referer = await quick_commands.select_user(user.referer)
                await quick_commands.update_user_balance(user.referer, referer.balance+round(int(data['model_price'])*percent/100))

            worksheet = await check_google_sheets(agcm)
            col1 = await worksheet.col_values(2)
            await worksheet.update_cell(len(col1)+1, 2, datetime.now().strftime("%d.%m.%Y %H:%M"))
            await worksheet.update_cell(len(col1)+1, 3, order.id)
            await worksheet.update_cell(len(col1)+1, 4, data['name_user'])
            await worksheet.update_cell(len(col1)+1, 5, data['address'])
            await worksheet.update_cell(len(col1)+1, 6, data['phone'])
            await worksheet.update_cell(len(col1)+1, 8, data['link_name_number'])
            await worksheet.update_cell(len(col1)+1, 9, data['model_name'])
            await worksheet.update_cell(len(col1)+1, 10, data['model_color'])
            await worksheet.update_cell(len(col1)+1, 11, data['model_size'])
            await worksheet.update_cell(len(col1)+1, 15, data['model_price'])
            await worksheet.update_cell(len(col1)+1, 16, data['bonus'])
            if call.from_user.username is not None:
                await worksheet.update_cell(len(col1)+1, 23, f't.me/{call.from_user.username}')
            await worksheet.update_cell(len(col1)+1, 24, call.from_user.id)
            await worksheet.update_cell(len(col1)+1, 25, '–ö—Ä–∏–ø—Ç–∞')

            await state.finish()

    except Exception as err:
        await dp.bot.send_message(admin_id[0], f'{status}')
        await dp.bot.send_message(admin_id[0], f'{err}')


@dp.message_handler(state=states.Belenka.Screen, content_types=ContentType.PHOTO)
async def photo_screen(message: Message, state: FSMContext):
    data = await state.get_data()
    await dp.bot.delete_message(chat_id=message.from_user.id, message_id=data['msg_id'])

    await message.delete()

    await message.answer(
        text=f"""–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º –∏ –ë–ª–∞–≥–æ–î–∞—Ä–∏–º –∑–∞ –ø–æ–∫—É–ø–∫—É. 
üë£ –î–∞–ª–µ–µ –º—ã —Å–¥–µ–ª–∞–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω–æ–µ, —á—Ç–æ–±—ã –í–∞—à –±–æ—Å–æ–Ω–æ–≥–∏–π –ø–∞—Ä–∫ –∫–∞–∫ –º–æ–∂–Ω–æ –±—ã—Å—Ç—Ä–µ–µ –ø–æ–ø–æ–ª–Ω–∏–ª—Å—è –µ—â–µ –æ–¥–Ω–æ–π –ø—Ä–µ–∫—Ä–∞—Å–Ω–æ–π –ø–∞—Ä–æ–π. 
–ù–æ–º–µ—Ä —Ç—Ä–µ–∫–∞ —Å–æ–æ–±—â–∏–º –∑–¥–µ—Å—å –∂–µ.

C –ª—é–±–æ–≤—å—é, –ö–æ–º–∞–Ω–¥–∞ ALL Barefoot""", 
        reply_markup=main_keyboards.to_menu_keyboard
    )

    ordernew = await quick_commands.add_order(
        user_id=message.from_user.id,
        time_created=datetime.now().strftime("%d.%m.%Y %H:%M"),
        link_name_number=data['link_name_number'], 
        name_user=data['name_user'], 
        address=data['address'], 
        phone=data['phone'], 
        model_name=data['model_name'], 
        model_color=data['model_color'], 
        model_size=data['model_size'], 
        model_price=str(data['model_price']),
        currency='RUB',
        screen=message.photo[-1].file_id,
        bonus=str(data['bonus'])
    )

    await dp.bot.send_photo(admin_id[1], message.photo[-1].file_id, f'–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: {ordernew.id}\n–ò–º—è: {data["name_user"]}\n–ö –æ–ø–ª–∞—Ç–µ: {data["model_price"]}RUB\n–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: {data["option"]}')

    setts = await quick_commands.select_settings()
    percent = setts.percent

    user = await quick_commands.select_user(message.from_user.id)
    if user.referer is not None:
        referer = await quick_commands.select_user(user.referer)
        await quick_commands.update_user_balance(user.referer, referer.balance+round(int(data['model_price'])*percent/100))

    worksheet = await check_google_sheets(agcm)
    col1 = await worksheet.col_values(2)
    await worksheet.update_cell(len(col1)+1, 2, datetime.now().strftime("%d.%m.%Y %H:%M"))
    await worksheet.update_cell(len(col1)+1, 3, ordernew.id)
    await worksheet.update_cell(len(col1)+1, 4, data['name_user'])
    await worksheet.update_cell(len(col1)+1, 5, data['address'])
    await worksheet.update_cell(len(col1)+1, 6, data['phone'])
    await worksheet.update_cell(len(col1)+1, 8, data['link_name_number'])
    await worksheet.update_cell(len(col1)+1, 9, data['model_name'])
    await worksheet.update_cell(len(col1)+1, 10, data['model_color'])
    await worksheet.update_cell(len(col1)+1, 11, data['model_size'])
    await worksheet.update_cell(len(col1)+1, 15, data['model_price'])
    await worksheet.update_cell(len(col1)+1, 16, data['bonus'])
    if message.from_user.username is not None:
        await worksheet.update_cell(len(col1)+1, 23, f't.me/{message.from_user.username}')
    await worksheet.update_cell(len(col1)+1, 24, message.from_user.id)
    await worksheet.update_cell(len(col1)+1, 25, f"t.me/allbarefoot_bot?start=screen{ordernew.id}")


# ------------------------------- –ë –û –° –û –û –ë –£ –í –¨ --------------------------------------


@dp.callback_query_handler(text='bosoobuv')
async def bosoobuv(call: CallbackQuery, state: FSMContext):
    await call.answer()
    text = await quick_commands.select_text_2vetka()
    msg = await call.message.edit_text(
        text=text, 
        reply_markup=main_keyboards.to_menu_keyboard,
        parse_mode='html'
    )
    await state.update_data(msg_id=msg.message_id)
    await states.Bosoobuv.LinkNameNumber.set()


@dp.message_handler(state=states.Bosoobuv.LinkNameNumber)
async def linknameumber(message: Message, state: FSMContext):
    data = await state.get_data()

    await message.delete()
    await dp.bot.edit_message_text(
        chat_id=message.from_user.id, 
        message_id=data['msg_id'], 
        text="–í–∞—à–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—è –õ–ê–¢–ò–ù–°–ö–ò–ú–ò –±—É–∫–≤–∞–º–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ—Å—ã–ª–∫–∏", 
        reply_markup=main_keyboards.cancel_keyboard
    )

    await state.update_data(link_name_number=message.text)
    await states.Bosoobuv.NameUser.set()


@dp.message_handler(state=states.Bosoobuv.NameUser)
async def nameuser(message: Message, state: FSMContext):
    data = await state.get_data()

    await message.delete()
    await dp.bot.edit_message_text(
        chat_id=message.from_user.id, 
        message_id=data['msg_id'], 
        text="–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏ –õ–ê–¢–ò–ù–°–ö–ò–ú–ò –±—É–∫–≤–∞–º–∏ (—É–ª–∏—Ü–∞, –Ω–æ–º–µ—Ä –¥–æ–º–∞/–∫–≤–∞—Ä—Ç–∏—Ä—ã, –≥–æ—Ä–æ–¥, –æ–±–ª–∞—Å—Ç—å, –∏–Ω–¥–µ–∫—Å). –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞", 
        reply_markup=main_keyboards.cancel_keyboard
    )

    await state.update_data(name_user=message.text)
    await states.Bosoobuv.Address.set()


@dp.message_handler(state=states.Bosoobuv.Address)
async def address(message: Message, state: FSMContext):
    data = await state.get_data()

    await message.delete()
    await dp.bot.edit_message_text(
        chat_id=message.from_user.id, 
        message_id=data['msg_id'], 
        text="–í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", 
        reply_markup=main_keyboards.cancel_keyboard
    )

    await state.update_data(address=message.text)
    await states.Bosoobuv.Phone.set()


@dp.message_handler(state=states.Bosoobuv.Phone)
async def phone(message: Message, state: FSMContext):
    data = await state.get_data()

    await message.delete()
    await dp.bot.edit_message_text(
        chat_id=message.from_user.id, 
        message_id=data['msg_id'], 
        text="–ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ (–¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –≤–æ –∏–∑–±–µ–∂–∞–Ω–∏–µ –æ—à–∏–±–∫–∏)", 
        reply_markup=main_keyboards.cancel_keyboard
    )

    await state.update_data(phone=message.text)
    await states.Bosoobuv.ModelName.set()


@dp.message_handler(state=states.Bosoobuv.ModelName)
async def modelname(message: Message, state: FSMContext):
    data = await state.get_data()

    await message.delete()
    await dp.bot.edit_message_text(
        chat_id=message.from_user.id, 
        message_id=data['msg_id'], 
        text="–¶–≤–µ—Ç –º–æ–¥–µ–ª–∏ (–∫–∞–∫ —É–∫–∞–∑–∞–Ω–æ –Ω–∞ —Å–∞–π—Ç–µ)", 
        reply_markup=main_keyboards.cancel_keyboard
    )

    await state.update_data(model_name=message.text)
    await states.Bosoobuv.ModelColor.set()


@dp.message_handler(state=states.Bosoobuv.ModelColor)
async def modelcolor(message: Message, state: FSMContext):
    data = await state.get_data()

    await message.delete()
    await dp.bot.edit_message_text(
        chat_id=message.from_user.id, 
        message_id=data['msg_id'], 
        text="–†–∞–∑–º–µ—Ä –º–æ–¥–µ–ª–∏ (–ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ª–∏—á–∏–µ –Ω–∞ —Å–∞–π—Ç–µ!)", 
        reply_markup=main_keyboards.cancel_keyboard
    )

    await state.update_data(model_color=message.text)
    await states.Bosoobuv.ModelSize.set()


@dp.message_handler(state=states.Bosoobuv.ModelSize)
async def modelsize(message: Message, state: FSMContext):
    data = await state.get_data()

    await message.delete()
    await dp.bot.edit_message_text(
        chat_id=message.from_user.id, 
        message_id=data['msg_id'], 
        text="–°—Ç–æ–∏–º–æ—Å—Ç—å –º–æ–¥–µ–ª–∏ (–≤ –ï–í–†–û!!!), –ø—Ä–æ—Å—Ç–æ —á–∏—Å–ª–æ –±–µ–∑ –¥–æ–ø.—Å–∏–º–≤–æ–ª–æ–≤", 
        reply_markup=main_keyboards.cancel_keyboard
    )

    await state.update_data(model_size=message.text)
    await states.Bosoobuv.ModelPrice.set()


@dp.message_handler(state=states.Bosoobuv.ModelPrice)
async def modelprice(message: Message, state: FSMContext):
    data = await state.get_data()
    coeff = await quick_commands.select_coeff_2vetka()

    await message.delete()
    try:
        await dp.bot.edit_message_text(
            chat_id=message.from_user.id, 
            message_id=data['msg_id'], 
            text=f"–û–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–∞—è —Å—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ:\n<b>{int(message.text)*coeff}RUB</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∏–∂–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:", 
            reply_markup=main_keyboards.oplata_keyboard
        )
        await state.update_data(bonus=0, euro=message.text, model_price=str(int(message.text)*coeff))
        await states.Bosoobuv.Screen.set()

    except ValueError:
        await dp.bot.edit_message_text(
            chat_id=message.from_user.id, 
            message_id=data['msg_id'], 
            text=f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ", 
            reply_markup=main_keyboards.cancel_keyboard
        )
    

@dp.callback_query_handler(text='tinkoff', state=states.Bosoobuv.Screen)
async def tinkoff(call: CallbackQuery, state: FSMContext):
    await call.answer()
    text = await quick_commands.select_text_card()
    msg = await call.message.edit_text(
        text=text, 
        reply_markup=main_keyboards.cancel_keyboard,
        parse_mode='html'
    )
    
    await state.update_data(option='–ù–∞ –∫–∞—Ä—Ç—É', msg_id=msg.message_id)


@dp.callback_query_handler(text='SBP', state=states.Bosoobuv.Screen)
async def sbp(call: CallbackQuery, state: FSMContext):
    await call.answer()
    text = await quick_commands.select_text_sbp()
    msg = await call.message.edit_text(
        text=text, 
        reply_markup=main_keyboards.cancel_keyboard,
        parse_mode='html'
    )
    
    await state.update_data(option='–°–ë–ü', msg_id=msg.message_id)


@dp.callback_query_handler(text='bonus', state=states.Bosoobuv.Screen)
async def bonus(call: CallbackQuery, state: FSMContext):
    await call.answer()
    user = await quick_commands.select_user(call.from_user.id)
    if user.balance == 0:
        await call.message.edit_text(
            text='–í–∞—à –±–∞–ª–∞–Ω—Å –ø—É—Å—Ç! üòî', 
            reply_markup=main_keyboards.back_keyboard,
            parse_mode='html'
        )
    else:
        await call.message.edit_text(
            text=f'–í–∞—à –±–∞–ª–∞–Ω—Å - {user.balance}RUB\n\n–°–ø–∏—Å–∞—Ç—å –≤ —É—á—ë—Ç –ø–æ–∫—É–ø–∫–∏?', 
            reply_markup=main_keyboards.bonus_keyboard,
            parse_mode='html'
        )


@dp.callback_query_handler(text='back', state=states.Bosoobuv.Screen)
async def modelprice(call: CallbackQuery, state: FSMContext):
    data = await state.get_data()

    await call.message.edit_text(
        text=f"–û–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–∞—è —Å—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ:\n<b>{data['model_price']}RUB</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∏–∂–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:", 
        reply_markup=main_keyboards.oplata_keyboard
    )


@dp.callback_query_handler(text='yes', state=states.Bosoobuv.Screen)
async def modelprice(call: CallbackQuery, state: FSMContext):
    data = await state.get_data()

    user = await quick_commands.select_user(call.from_user.id)
    if user.balance >= int(data['model_price']):
        await quick_commands.update_user_balance(call.from_user.id, user.balance-int(data['model_price']))

        await call.message.edit_text("""–í–∞—à–∏ –±–æ–Ω—É—Å—ã —Å–ø–∏—Å–∞–Ω—ã!\n\n–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º –∏ –ë–ª–∞–≥–æ–î–∞—Ä–∏–º –∑–∞ –ø–æ–∫—É–ø–∫—É. 
üë£ –î–∞–ª–µ–µ –º—ã —Å–¥–µ–ª–∞–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω–æ–µ, —á—Ç–æ–±—ã –í–∞—à –±–æ—Å–æ–Ω–æ–≥–∏–π –ø–∞—Ä–∫ –∫–∞–∫ –º–æ–∂–Ω–æ –±—ã—Å—Ç—Ä–µ–µ –ø–æ–ø–æ–ª–Ω–∏–ª—Å—è –µ—â–µ –æ–¥–Ω–æ–π –ø—Ä–µ–∫—Ä–∞—Å–Ω–æ–π –ø–∞—Ä–æ–π. 
–ù–æ–º–µ—Ä —Ç—Ä–µ–∫–∞ —Å–æ–æ–±—â–∏–º –∑–¥–µ—Å—å –∂–µ.

C –ª—é–±–æ–≤—å—é, –ö–æ–º–∞–Ω–¥–∞ ALL Barefoot""", 
            reply_markup=main_keyboards.to_menu_keyboard
        )

        order = await quick_commands.add_order(
            user_id=call.from_user.id,
            time_created=datetime.now().strftime("%d.%m.%Y %H:%M"),
            link_name_number=data['link_name_number'], 
            name_user=data['name_user'], 
            address=data['address'], 
            phone=data['phone'], 
            model_name=data['model_name'], 
            model_color=data['model_color'], 
            model_size=data['model_size'], 
            model_price=data['model_price'],
            currency='USD',
            screen='–ë–æ–Ω—É—Å—ã',
            bonus=str(data['bonus'])
        )

        coeff = await quick_commands.select_coeff_2vetka()
        worksheet = await check_google_sheets(agcm)
        col1 = await worksheet.col_values(2)
        await worksheet.update_cell(len(col1)+1, 2, datetime.now().strftime("%d.%m.%Y %H:%M"))
        await worksheet.update_cell(len(col1)+1, 3, order.id)
        await worksheet.update_cell(len(col1)+1, 4, data['name_user'])
        await worksheet.update_cell(len(col1)+1, 5, data['address'])
        await worksheet.update_cell(len(col1)+1, 6, data['phone'])
        await worksheet.update_cell(len(col1)+1, 8, data['link_name_number'])
        await worksheet.update_cell(len(col1)+1, 9, data['model_name'])
        await worksheet.update_cell(len(col1)+1, 10, data['model_color'])
        await worksheet.update_cell(len(col1)+1, 11, data['model_size'])
        await worksheet.update_cell(len(col1)+1, 13, data['euro'])
        await worksheet.update_cell(len(col1)+1, 14, coeff)
        await worksheet.update_cell(len(col1)+1, 15, int(data['euro'])*coeff)
        await worksheet.update_cell(len(col1)+1, 16, data['bonus'])
        if call.from_user.username is not None:
            await worksheet.update_cell(len(col1)+1, 23, f't.me/{call.from_user.username}')
        await worksheet.update_cell(len(col1)+1, 24, call.from_user.id)
        await worksheet.update_cell(len(col1)+1, 25, '–ë–æ–Ω—É—Å—ã')

        await state.finish()

    else:

        await call.message.edit_text( 
            text=f"–í–∞—à–∏ –±–æ–Ω—É—Å—ã —Å–ø–∏—Å–∞–Ω—ã!", 
            reply_markup=main_keyboards.back_keyboard
        )

        await state.update_data(bonus=user.balance, model_price=str(int(data['model_price'])))
        await quick_commands.update_user_balance(0)


@dp.callback_query_handler(text='crypto', state=states.Bosoobuv.Screen)
async def crypto(call: CallbackQuery, state: FSMContext):
    data = await state.get_data()

    amount = int(data['model_price'])

    price = convert_currency_yahoofin('RUB', "USD", amount)
    price = round(price, 2)

    payment = Payment(price)
    link = await payment.init
    uuid = payment.uuid
    await state.update_data(uuid=uuid, link=link, amount=price)
    markup = await order_keyboards.markup_pay(link)

    await call.message.edit_text('''üí∏ –í–∞—à–∞ —Å—Å—ã–ª–∫–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã: {link}

–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: ~ ${price}
–°—Å—ã–ª–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ 2-—Ö —á–∞—Å–æ–≤.

‚ö†Ô∏è –í–ê–ñ–ù–û! –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—É–º–º—É –Ω–µ –º–µ–Ω—å—à–µ —É–∫–∞–∑–∞–Ω–Ω–æ–π, –∏–Ω–∞—á–µ –≤—ã –Ω–µ –ø–æ–ª—É—á–∏—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã. –ó–∞–∫–ª–∞–¥—ã–≤–∞–π—Ç–µ —Ä–∞—Å—Ö–æ–¥—ã –Ω–∞ –∫–æ–º–∏—Å—Å–∏—é.'''.format(link=link, price=price), reply_markup=markup)


@dp.callback_query_handler(text='paid', state=states.Bosoobuv.Screen)
async def paid(call: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    payment = Payment(uuid=data['uuid'], amount=data['amount'])
    user = await quick_commands.select_user(call.from_user.id)

    status = await payment.check_payment()
    try:
        if status == 'created':
            await call.answer('‚ùå –û–ø–ª–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!', show_alert=True)
        elif status == 'partial':
            await call.answer('‚ö†Ô∏è –í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –æ–ø–ª–∞—Ç—ã, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—â–µ!', show_alert=True)
        elif status == 'paid':
            await call.message.edit_text("""–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º –∏ –ë–ª–∞–≥–æ–î–∞—Ä–∏–º –∑–∞ –ø–æ–∫—É–ø–∫—É. 
üë£ –î–∞–ª–µ–µ –º—ã —Å–¥–µ–ª–∞–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω–æ–µ, —á—Ç–æ–±—ã –í–∞—à –±–æ—Å–æ–Ω–æ–≥–∏–π –ø–∞—Ä–∫ –∫–∞–∫ –º–æ–∂–Ω–æ –±—ã—Å—Ç—Ä–µ–µ –ø–æ–ø–æ–ª–Ω–∏–ª—Å—è –µ—â–µ –æ–¥–Ω–æ–π –ø—Ä–µ–∫—Ä–∞—Å–Ω–æ–π –ø–∞—Ä–æ–π. 
–ù–æ–º–µ—Ä —Ç—Ä–µ–∫–∞ —Å–æ–æ–±—â–∏–º –∑–¥–µ—Å—å –∂–µ.

C –ª—é–±–æ–≤—å—é, –ö–æ–º–∞–Ω–¥–∞ ALL Barefoot""", 
                reply_markup=main_keyboards.to_menu_keyboard
            )

            order = await quick_commands.add_order(
                user_id=call.from_user.id,
                time_created=datetime.now().strftime("%d.%m.%Y %H:%M"),
                link_name_number=data['link_name_number'], 
                name_user=data['name_user'], 
                address=data['address'], 
                phone=data['phone'], 
                model_name=data['model_name'], 
                model_color=data['model_color'], 
                model_size=data['model_size'], 
                model_price=data['model_price'],
                currency='USD',
                screen='–ß–µ—Ä–µ–∑ –∫—Ä–∏–ø—Ç—É',
                bonus=str(data['bonus'])
            )

            coeff = await quick_commands.select_coeff_2vetka()
            setts = await quick_commands.select_settings()
            percent = setts.percent

            user = await quick_commands.select_user(call.from_user.id)
            if user.referer is not None:
                referer = await quick_commands.select_user(user.referer)
                await quick_commands.update_user_balance(user.referer, referer.balance+round(int(data['euro'])*coeff*percent/100))

            worksheet = await check_google_sheets(agcm)
            col1 = await worksheet.col_values(2)
            await worksheet.update_cell(len(col1)+1, 2, datetime.now().strftime("%d.%m.%Y %H:%M"))
            await worksheet.update_cell(len(col1)+1, 3, order.id)
            await worksheet.update_cell(len(col1)+1, 4, data['name_user'])
            await worksheet.update_cell(len(col1)+1, 5, data['address'])
            await worksheet.update_cell(len(col1)+1, 6, data['phone'])
            await worksheet.update_cell(len(col1)+1, 8, data['link_name_number'])
            await worksheet.update_cell(len(col1)+1, 9, data['model_name'])
            await worksheet.update_cell(len(col1)+1, 10, data['model_color'])
            await worksheet.update_cell(len(col1)+1, 11, data['model_size'])
            await worksheet.update_cell(len(col1)+1, 13, data['euro'])
            await worksheet.update_cell(len(col1)+1, 14, coeff)
            await worksheet.update_cell(len(col1)+1, 15, int(data['euro'])*coeff)
            await worksheet.update_cell(len(col1)+1, 16, data['bonus'])
            if call.from_user.username is not None:
                await worksheet.update_cell(len(col1)+1, 23, f't.me/{call.from_user.username}')
            await worksheet.update_cell(len(col1)+1, 24, call.from_user.id)
            await worksheet.update_cell(len(col1)+1, 25, '–ö—Ä–∏–ø—Ç–∞')

            await state.finish()

    except Exception as err:
        await dp.bot.send_message(admin_id[0], f'{status}')
        await dp.bot.send_message(admin_id[0], f'{err}')


@dp.message_handler(state=states.Bosoobuv.Screen, content_types=ContentType.PHOTO)
async def photo_screen(message: Message, state: FSMContext):
    data = await state.get_data()

    await dp.bot.delete_message(chat_id=message.from_user.id, message_id=data['msg_id'])
    await message.delete()

    await message.answer(
        text=f"""–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º –∏ –ë–ª–∞–≥–æ–î–∞—Ä–∏–º –∑–∞ –ø–æ–∫—É–ø–∫—É. 
üë£ –î–∞–ª–µ–µ –º—ã —Å–¥–µ–ª–∞–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω–æ–µ, —á—Ç–æ–±—ã –í–∞—à –±–æ—Å–æ–Ω–æ–≥–∏–π –ø–∞—Ä–∫ –∫–∞–∫ –º–æ–∂–Ω–æ –±—ã—Å—Ç—Ä–µ–µ –ø–æ–ø–æ–ª–Ω–∏–ª—Å—è –µ—â–µ –æ–¥–Ω–æ–π –ø—Ä–µ–∫—Ä–∞—Å–Ω–æ–π –ø–∞—Ä–æ–π. 
–ù–æ–º–µ—Ä —Ç—Ä–µ–∫–∞ —Å–æ–æ–±—â–∏–º –∑–¥–µ—Å—å –∂–µ.

C –ª—é–±–æ–≤—å—é, –ö–æ–º–∞–Ω–¥–∞ ALL Barefoot""", 
        reply_markup=main_keyboards.to_menu_keyboard
    )

    order = await quick_commands.add_order(
        user_id=message.from_user.id,
        time_created=datetime.now().strftime("%d.%m.%Y %H:%M"),
        link_name_number=data['link_name_number'], 
        name_user=data['name_user'], 
        address=data['address'], 
        phone=data['phone'], 
        model_name=data['model_name'], 
        model_color=data['model_color'], 
        model_size=data['model_size'], 
        model_price=data['model_price'],
        currency='EUR',
        screen=message.photo[-1].file_id,
        bonus=str(data['bonus'])
    )

    await dp.bot.send_photo(admin_id[1], message.photo[-1].file_id, f'–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: {order.id}\n–ò–º—è: {data["name_user"]}\n–ö –æ–ø–ª–∞—Ç–µ: {data["model_price"]}RUB\n–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: {data["option"]}')

    coeff = await quick_commands.select_coeff_2vetka()
    setts = await quick_commands.select_settings()
    percent = setts.percent

    user = await quick_commands.select_user(message.from_user.id)
    if user.referer is not None:
        referer = await quick_commands.select_user(user.referer)
        await quick_commands.update_user_balance(user.referer, referer.balance+round(int(data['euro'])*coeff*percent/100))

    worksheet = await check_google_sheets(agcm)
    col1 = await worksheet.col_values(2)
    await worksheet.update_cell(len(col1)+1, 2, datetime.now().strftime("%d.%m.%Y %H:%M"))
    await worksheet.update_cell(len(col1)+1, 3, order.id)
    await worksheet.update_cell(len(col1)+1, 4, data['name_user'])
    await worksheet.update_cell(len(col1)+1, 5, data['address'])
    await worksheet.update_cell(len(col1)+1, 6, data['phone'])
    await worksheet.update_cell(len(col1)+1, 8, data['link_name_number'])
    await worksheet.update_cell(len(col1)+1, 9, data['model_name'])
    await worksheet.update_cell(len(col1)+1, 10, data['model_color'])
    await worksheet.update_cell(len(col1)+1, 11, data['model_size'])
    await worksheet.update_cell(len(col1)+1, 13, data['euro'])
    await worksheet.update_cell(len(col1)+1, 14, coeff)
    await worksheet.update_cell(len(col1)+1, 15, int(data['euro'])*coeff)
    await worksheet.update_cell(len(col1)+1, 16, data['bonus'])
    if message.from_user.username is not None:
        await worksheet.update_cell(len(col1)+1, 23, f't.me/{message.from_user.username}')
    await worksheet.update_cell(len(col1)+1, 24, message.from_user.id)
    await worksheet.update_cell(len(col1)+1, 25, f"t.me/allbarefoot_bot?start=screen{order.id}")



# ------------------------------- L I T T L E   S H O E S -------------------------------------


@dp.callback_query_handler(text='littleshoes')
async def littleshoes(call: CallbackQuery, state: FSMContext):
    await call.answer()
    text = await quick_commands.select_text_3vetka()
    msg = await call.message.edit_text(
        text=text, 
        reply_markup=main_keyboards.to_menu_keyboard, 
        parse_mode='html'
    )
    await state.update_data(msg_id=msg.message_id)
    await states.LittleShoes.LinkNameNumber.set()


@dp.message_handler(state=states.LittleShoes.LinkNameNumber)
async def linknameumber(message: Message, state: FSMContext):
    data = await state.get_data()

    await message.delete()
    await dp.bot.edit_message_text(
        chat_id=message.from_user.id, 
        message_id=data['msg_id'], 
        text="–í–∞—à–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—è –õ–ê–¢–ò–ù–°–ö–ò–ú–ò –±—É–∫–≤–∞–º–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ—Å—ã–ª–∫–∏", 
        reply_markup=main_keyboards.cancel_keyboard
    )

    await state.update_data(link_name_number=message.text)
    await states.LittleShoes.NameUser.set()


@dp.message_handler(state=states.LittleShoes.NameUser)
async def nameuser(message: Message, state: FSMContext):
    data = await state.get_data()

    await message.delete()
    await dp.bot.edit_message_text(
        chat_id=message.from_user.id, 
        message_id=data['msg_id'], 
        text="–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏ –õ–ê–¢–ò–ù–°–ö–ò–ú–ò –±—É–∫–≤–∞–º–∏ (—É–ª–∏—Ü–∞, –Ω–æ–º–µ—Ä –¥–æ–º–∞/–∫–≤–∞—Ä—Ç–∏—Ä—ã, –≥–æ—Ä–æ–¥, –æ–±–ª–∞—Å—Ç—å, –∏–Ω–¥–µ–∫—Å). –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞", 
        reply_markup=main_keyboards.cancel_keyboard
    )

    await state.update_data(name_user=message.text)
    await states.LittleShoes.Address.set()


@dp.message_handler(state=states.LittleShoes.Address)
async def address(message: Message, state: FSMContext):
    data = await state.get_data()

    await message.delete()
    await dp.bot.edit_message_text(
        chat_id=message.from_user.id, 
        message_id=data['msg_id'], 
        text="–í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", 
        reply_markup=main_keyboards.cancel_keyboard
    )

    await state.update_data(address=message.text)
    await states.LittleShoes.Phone.set()


@dp.message_handler(state=states.LittleShoes.Phone)
async def phone(message: Message, state: FSMContext):
    data = await state.get_data()

    await message.delete()
    await dp.bot.edit_message_text(
        chat_id=message.from_user.id, 
        message_id=data['msg_id'], 
        text="–ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ (–¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –≤–æ –∏–∑–±–µ–∂–∞–Ω–∏–µ –æ—à–∏–±–∫–∏)", 
        reply_markup=main_keyboards.cancel_keyboard
    )

    await state.update_data(phone=message.text)
    await states.LittleShoes.ModelName.set()


@dp.message_handler(state=states.LittleShoes.ModelName)
async def modelname(message: Message, state: FSMContext):
    data = await state.get_data()

    await message.delete()
    await dp.bot.edit_message_text(
        chat_id=message.from_user.id, 
        message_id=data['msg_id'], 
        text="–¶–≤–µ—Ç –º–æ–¥–µ–ª–∏ (–∫–∞–∫ —É–∫–∞–∑–∞–Ω–æ –Ω–∞ —Å–∞–π—Ç–µ)", 
        reply_markup=main_keyboards.cancel_keyboard
    )

    await state.update_data(model_name=message.text)
    await states.LittleShoes.ModelColor.set()


@dp.message_handler(state=states.LittleShoes.ModelColor)
async def modelcolor(message: Message, state: FSMContext):
    data = await state.get_data()

    await message.delete()
    await dp.bot.edit_message_text(
        chat_id=message.from_user.id, 
        message_id=data['msg_id'], 
        text="–†–∞–∑–º–µ—Ä –º–æ–¥–µ–ª–∏ (–ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ª–∏—á–∏–µ –Ω–∞ —Å–∞–π—Ç–µ!)", 
        reply_markup=main_keyboards.cancel_keyboard
    )

    await state.update_data(model_color=message.text)
    await states.LittleShoes.ModelSize.set()


@dp.message_handler(state=states.LittleShoes.ModelSize)
async def modelsize(message: Message, state: FSMContext):
    data = await state.get_data()

    await message.delete()
    await dp.bot.edit_message_text(
        chat_id=message.from_user.id, 
        message_id=data['msg_id'], 
        text="–°—Ç–æ–∏–º–æ—Å—Ç—å –º–æ–¥–µ–ª–∏ (–≤ –ï–í–†–û!!!), –ø—Ä–æ—Å—Ç–æ —á–∏—Å–ª–æ –±–µ–∑ –¥–æ–ø.—Å–∏–º–≤–æ–ª–æ–≤", 
        reply_markup=main_keyboards.cancel_keyboard
    )

    await state.update_data(model_size=message.text)
    await states.LittleShoes.ModelPrice.set()


@dp.message_handler(state=states.LittleShoes.ModelPrice)
async def modelprice(message: Message, state: FSMContext):
    data = await state.get_data()
    coeff = await quick_commands.select_coeff_3vetka()

    await message.delete()
    try:
        await dp.bot.edit_message_text(
            chat_id=message.from_user.id, 
            message_id=data['msg_id'], 
            text=f"–û–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–∞—è —Å—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ:\n<b>{int(message.text)*coeff}RUB</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∏–∂–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:", 
            reply_markup=main_keyboards.oplata_keyboard
        )
        await state.update_data(bonus=0, euro=message.text, model_price=str(int(message.text)*coeff))
        await states.LittleShoes.Screen.set()

    except ValueError:
        await dp.bot.edit_message_text(
            chat_id=message.from_user.id, 
            message_id=data['msg_id'], 
            text=f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ", 
            reply_markup=main_keyboards.cancel_keyboard
        )
    

@dp.callback_query_handler(text='tinkoff', state=states.LittleShoes.Screen)
async def tinkoff(call: CallbackQuery, state: FSMContext):
    await call.answer()
    text = await quick_commands.select_text_card()
    msg = await call.message.edit_text(
        text=text, 
        reply_markup=main_keyboards.cancel_keyboard,
        parse_mode='html'
    )
    
    await state.update_data(option='–ù–∞ –∫–∞—Ä—Ç—É', msg_id=msg.message_id)


@dp.callback_query_handler(text='SBP', state=states.LittleShoes.Screen)
async def sbp(call: CallbackQuery, state: FSMContext):
    await call.answer()
    text = await quick_commands.select_text_sbp()
    msg = await call.message.edit_text(
        text=text, 
        reply_markup=main_keyboards.cancel_keyboard,
        parse_mode='html'
    )
    
    await state.update_data(option='–°–ë–ü', msg_id=msg.message_id)


@dp.callback_query_handler(text='bonus', state=states.Bosoobuv.Screen)
async def bonus(call: CallbackQuery, state: FSMContext):
    await call.answer()
    user = await quick_commands.select_user(call.from_user.id)
    if user.balance == 0:
        await call.message.edit_text(
            text='–í–∞—à –±–∞–ª–∞–Ω—Å –ø—É—Å—Ç! üòî', 
            reply_markup=main_keyboards.back_keyboard,
            parse_mode='html'
        )
    else:
        await call.message.edit_text(
            text=f'–í–∞—à –±–∞–ª–∞–Ω—Å - {user.balance}RUB\n\n–°–ø–∏—Å–∞—Ç—å –≤ —É—á—ë—Ç –ø–æ–∫—É–ø–∫–∏?', 
            reply_markup=main_keyboards.bonus_keyboard,
            parse_mode='html'
        )


@dp.callback_query_handler(text='back', state=states.Bosoobuv.Screen)
async def modelprice(call: CallbackQuery, state: FSMContext):
    data = await state.get_data()

    await call.message.edit_text(
        text=f"–û–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–∞—è —Å—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ:\n<b>{data['model_price']}RUB</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∏–∂–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:", 
        reply_markup=main_keyboards.oplata_keyboard
    )


@dp.callback_query_handler(text='yes', state=states.Bosoobuv.Screen)
async def modelprice(call: CallbackQuery, state: FSMContext):
    data = await state.get_data()

    user = await quick_commands.select_user(call.from_user.id)
    if user.balance >= int(data['model_price']):
        await quick_commands.update_user_balance(call.from_user.id, user.balance-int(data['model_price']))

        await call.message.edit_text("""–í–∞—à–∏ –±–æ–Ω—É—Å—ã —Å–ø–∏—Å–∞–Ω—ã!\n\n–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º –∏ –ë–ª–∞–≥–æ–î–∞—Ä–∏–º –∑–∞ –ø–æ–∫—É–ø–∫—É. 
üë£ –î–∞–ª–µ–µ –º—ã —Å–¥–µ–ª–∞–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω–æ–µ, —á—Ç–æ–±—ã –í–∞—à –±–æ—Å–æ–Ω–æ–≥–∏–π –ø–∞—Ä–∫ –∫–∞–∫ –º–æ–∂–Ω–æ –±—ã—Å—Ç—Ä–µ–µ –ø–æ–ø–æ–ª–Ω–∏–ª—Å—è –µ—â–µ –æ–¥–Ω–æ–π –ø—Ä–µ–∫—Ä–∞—Å–Ω–æ–π –ø–∞—Ä–æ–π. 
–ù–æ–º–µ—Ä —Ç—Ä–µ–∫–∞ —Å–æ–æ–±—â–∏–º –∑–¥–µ—Å—å –∂–µ.

C –ª—é–±–æ–≤—å—é, –ö–æ–º–∞–Ω–¥–∞ ALL Barefoot""", 
            reply_markup=main_keyboards.to_menu_keyboard
        )

        order = await quick_commands.add_order(
            user_id=call.from_user.id,
            time_created=datetime.now().strftime("%d.%m.%Y %H:%M"),
            link_name_number=data['link_name_number'], 
            name_user=data['name_user'], 
            address=data['address'], 
            phone=data['phone'], 
            model_name=data['model_name'], 
            model_color=data['model_color'], 
            model_size=data['model_size'], 
            model_price=data['model_price'],
            currency='USD',
            screen='–ë–æ–Ω—É—Å—ã',
            bonus=str(data['bonus'])
        )

        coeff = await quick_commands.select_coeff_3vetka()
        worksheet = await check_google_sheets(agcm)
        col1 = await worksheet.col_values(2)
        await worksheet.update_cell(len(col1)+1, 2, datetime.now().strftime("%d.%m.%Y %H:%M"))
        await worksheet.update_cell(len(col1)+1, 3, order.id)
        await worksheet.update_cell(len(col1)+1, 4, data['name_user'])
        await worksheet.update_cell(len(col1)+1, 5, data['address'])
        await worksheet.update_cell(len(col1)+1, 6, data['phone'])
        await worksheet.update_cell(len(col1)+1, 8, data['link_name_number'])
        await worksheet.update_cell(len(col1)+1, 9, data['model_name'])
        await worksheet.update_cell(len(col1)+1, 10, data['model_color'])
        await worksheet.update_cell(len(col1)+1, 11, data['model_size'])
        await worksheet.update_cell(len(col1)+1, 13, data['euro'])
        await worksheet.update_cell(len(col1)+1, 14, coeff)
        await worksheet.update_cell(len(col1)+1, 15, int(data['euro'])*coeff)
        await worksheet.update_cell(len(col1)+1, 16, data['bonus'])
        if call.from_user.username is not None:
            await worksheet.update_cell(len(col1)+1, 23, f't.me/{call.from_user.username}')
        await worksheet.update_cell(len(col1)+1, 24, call.from_user.id)
        await worksheet.update_cell(len(col1)+1, 25, '–ë–æ–Ω—É—Å—ã')

        await state.finish()

    else:

        await call.message.edit_text( 
            text=f"–í–∞—à–∏ –±–æ–Ω—É—Å—ã —Å–ø–∏—Å–∞–Ω—ã!", 
            reply_markup=main_keyboards.back_keyboard
        )

        await state.update_data(bonus=user.balance, model_price=str(int(data['model_price'])))
        await quick_commands.update_user_balance(0)


@dp.callback_query_handler(text='crypto', state=states.LittleShoes.Screen)
async def crypto(call: CallbackQuery, state: FSMContext):
    data = await state.get_data()

    amount = int(data['model_price'])

    price = convert_currency_yahoofin('RUB', "USD", amount)
    price = round(price, 2)

    payment = Payment(price)
    link = await payment.init
    uuid = payment.uuid
    await state.update_data(uuid=uuid, link=link, amount=price)
    markup = await order_keyboards.markup_pay(link)

    await call.message.edit_text('''üí∏ –í–∞—à–∞ —Å—Å—ã–ª–∫–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã: {link}

–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: ~ ${price}
–°—Å—ã–ª–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ 2-—Ö —á–∞—Å–æ–≤.

‚ö†Ô∏è –í–ê–ñ–ù–û! –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—É–º–º—É –Ω–µ –º–µ–Ω—å—à–µ —É–∫–∞–∑–∞–Ω–Ω–æ–π, –∏–Ω–∞—á–µ –≤—ã –Ω–µ –ø–æ–ª—É—á–∏—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã. –ó–∞–∫–ª–∞–¥—ã–≤–∞–π—Ç–µ —Ä–∞—Å—Ö–æ–¥—ã –Ω–∞ –∫–æ–º–∏—Å—Å–∏—é.'''.format(link=link, price=price), reply_markup=markup)


@dp.callback_query_handler(text='paid', state=states.LittleShoes.Screen)
async def paid(call: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    payment = Payment(uuid=data['uuid'], amount=data['amount'])
    user = await quick_commands.select_user(call.from_user.id)

    status = await payment.check_payment()
    try:
        if status == 'created':
            await call.answer('‚ùå –û–ø–ª–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!', show_alert=True)
        elif status == 'partial':
            await call.answer('‚ö†Ô∏è –í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –æ–ø–ª–∞—Ç—ã, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—â–µ!', show_alert=True)
        elif status == 'paid':
            await call.message.edit_text("""–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º –∏ –ë–ª–∞–≥–æ–î–∞—Ä–∏–º –∑–∞ –ø–æ–∫—É–ø–∫—É. 
üë£ –î–∞–ª–µ–µ –º—ã —Å–¥–µ–ª–∞–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω–æ–µ, —á—Ç–æ–±—ã –í–∞—à –±–æ—Å–æ–Ω–æ–≥–∏–π –ø–∞—Ä–∫ –∫–∞–∫ –º–æ–∂–Ω–æ –±—ã—Å—Ç—Ä–µ–µ –ø–æ–ø–æ–ª–Ω–∏–ª—Å—è –µ—â–µ –æ–¥–Ω–æ–π –ø—Ä–µ–∫—Ä–∞—Å–Ω–æ–π –ø–∞—Ä–æ–π. 
–ù–æ–º–µ—Ä —Ç—Ä–µ–∫–∞ —Å–æ–æ–±—â–∏–º –∑–¥–µ—Å—å –∂–µ.

C –ª—é–±–æ–≤—å—é, –ö–æ–º–∞–Ω–¥–∞ ALL Barefoot""", 
                reply_markup=main_keyboards.to_menu_keyboard
            )

            order = await quick_commands.add_order(
                user_id=call.from_user.id,
                time_created=datetime.now().strftime("%d.%m.%Y %H:%M"),
                link_name_number=data['link_name_number'], 
                name_user=data['name_user'], 
                address=data['address'], 
                phone=data['phone'], 
                model_name=data['model_name'], 
                model_color=data['model_color'], 
                model_size=data['model_size'], 
                model_price=data['model_price'],
                currency='USD',
                screen='–ß–µ—Ä–µ–∑ –∫—Ä–∏–ø—Ç—É',
                bonus=str(data['bonus'])
            )

            coeff = await quick_commands.select_coeff_3vetka()
            setts = await quick_commands.select_settings()
            percent = setts.percent

            user = await quick_commands.select_user(call.from_user.id)
            if user.referer is not None:
                referer = await quick_commands.select_user(user.referer)
                await quick_commands.update_user_balance(user.referer, referer.balance+round(int(data['euro'])*coeff*percent/100))

            worksheet = await check_google_sheets(agcm)
            col1 = await worksheet.col_values(2)
            await worksheet.update_cell(len(col1)+1, 2, datetime.now().strftime("%d.%m.%Y %H:%M"))
            await worksheet.update_cell(len(col1)+1, 3, order.id)
            await worksheet.update_cell(len(col1)+1, 4, data['name_user'])
            await worksheet.update_cell(len(col1)+1, 5, data['address'])
            await worksheet.update_cell(len(col1)+1, 6, data['phone'])
            await worksheet.update_cell(len(col1)+1, 8, data['link_name_number'])
            await worksheet.update_cell(len(col1)+1, 9, data['model_name'])
            await worksheet.update_cell(len(col1)+1, 10, data['model_color'])
            await worksheet.update_cell(len(col1)+1, 11, data['model_size'])
            await worksheet.update_cell(len(col1)+1, 13, data['euro'])
            await worksheet.update_cell(len(col1)+1, 14, coeff)
            await worksheet.update_cell(len(col1)+1, 15, int(data['euro'])*coeff)
            await worksheet.update_cell(len(col1)+1, 16, data['bonus'])
            if call.from_user.username is not None:
                await worksheet.update_cell(len(col1)+1, 23, f't.me/{call.from_user.username}')
            await worksheet.update_cell(len(col1)+1, 24, call.from_user.id)
            await worksheet.update_cell(len(col1)+1, 25, '–ö—Ä–∏–ø—Ç–∞')

            await state.finish()

    except Exception as err:
        await dp.bot.send_message(admin_id[0], f'{status}')
        await dp.bot.send_message(admin_id[0], f'{err}')


@dp.message_handler(state=states.LittleShoes.Screen, content_types=ContentType.PHOTO)
async def photo_screen(message: Message, state: FSMContext):
    data = await state.get_data()

    await dp.bot.delete_message(chat_id=message.from_user.id, message_id=data['msg_id'])
    await message.delete()

    await message.answer(
        text=f"""–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º –∏ –ë–ª–∞–≥–æ–î–∞—Ä–∏–º –∑–∞ –ø–æ–∫—É–ø–∫—É. 
üë£ –î–∞–ª–µ–µ –º—ã —Å–¥–µ–ª–∞–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω–æ–µ, —á—Ç–æ–±—ã –í–∞—à –±–æ—Å–æ–Ω–æ–≥–∏–π –ø–∞—Ä–∫ –∫–∞–∫ –º–æ–∂–Ω–æ –±—ã—Å—Ç—Ä–µ–µ –ø–æ–ø–æ–ª–Ω–∏–ª—Å—è –µ—â–µ –æ–¥–Ω–æ–π –ø—Ä–µ–∫—Ä–∞—Å–Ω–æ–π –ø–∞—Ä–æ–π. 
–ù–æ–º–µ—Ä —Ç—Ä–µ–∫–∞ —Å–æ–æ–±—â–∏–º –∑–¥–µ—Å—å –∂–µ.

C –ª—é–±–æ–≤—å—é, –ö–æ–º–∞–Ω–¥–∞ ALL Barefoot""", 
        reply_markup=main_keyboards.to_menu_keyboard
    )

    order = await quick_commands.add_order(
        user_id=message.from_user.id,
        time_created=datetime.now().strftime("%d.%m.%Y %H:%M"),
        link_name_number=data['link_name_number'], 
        name_user=data['name_user'], 
        address=data['address'], 
        phone=data['phone'], 
        model_name=data['model_name'], 
        model_color=data['model_color'], 
        model_size=data['model_size'], 
        model_price=data['model_price'],
        currency='EUR',
        screen=message.photo[-1].file_id,
        bonus=str(data['bonus'])
    )

    await dp.bot.send_photo(admin_id[1], message.photo[-1].file_id, f'–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: {order.id}\n–ò–º—è: {data["name_user"]}\n–ö –æ–ø–ª–∞—Ç–µ: {data["model_price"]}RUB\n–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: {data["option"]}')

    coeff = await quick_commands.select_coeff_3vetka()
    setts = await quick_commands.select_settings()
    percent = setts.percent

    user = await quick_commands.select_user(message.from_user.id)
    if user.referer is not None:
        referer = await quick_commands.select_user(user.referer)
        await quick_commands.update_user_balance(user.referer, referer.balance+round(int(data['euro'])*coeff*percent/100))

    worksheet = await check_google_sheets(agcm)
    col1 = await worksheet.col_values(2)
    await worksheet.update_cell(len(col1)+1, 2, datetime.now().strftime("%d.%m.%Y %H:%M"))
    await worksheet.update_cell(len(col1)+1, 3, order.id)
    await worksheet.update_cell(len(col1)+1, 4, data['name_user'])
    await worksheet.update_cell(len(col1)+1, 5, data['address'])
    await worksheet.update_cell(len(col1)+1, 6, data['phone'])
    await worksheet.update_cell(len(col1)+1, 8, data['link_name_number'])
    await worksheet.update_cell(len(col1)+1, 9, data['model_name'])
    await worksheet.update_cell(len(col1)+1, 10, data['model_color'])
    await worksheet.update_cell(len(col1)+1, 11, data['model_size'])
    await worksheet.update_cell(len(col1)+1, 13, data['euro'])
    await worksheet.update_cell(len(col1)+1, 14, coeff)
    await worksheet.update_cell(len(col1)+1, 15, int(data['euro'])*coeff)
    await worksheet.update_cell(len(col1)+1, 16, data['bonus'])
    if message.from_user.username is not None:
        await worksheet.update_cell(len(col1)+1, 23, f't.me/{message.from_user.username}')
    await worksheet.update_cell(len(col1)+1, 24, message.from_user.id)
    await worksheet.update_cell(len(col1)+1, 25, f"t.me/allbarefoot_bot?start=screen{order.id}")



# ------------------------------------- F A R E -------------------------------------


@dp.callback_query_handler(text='fare')
async def fare(call: CallbackQuery, state: FSMContext):
    await call.answer()
    text = await quick_commands.select_text_4vetka()
    msg = await call.message.edit_text(
        text=text, 
        reply_markup=main_keyboards.to_menu_keyboard, 
        parse_mode='html'
    )
    await state.update_data(msg_id=msg.message_id)
    await states.Fare.LinkNameNumber.set()


@dp.message_handler(state=states.Fare.LinkNameNumber)
async def linknameumber(message: Message, state: FSMContext):
    data = await state.get_data()

    await message.delete()
    await dp.bot.edit_message_text(
        chat_id=message.from_user.id, 
        message_id=data['msg_id'], 
        text="–í–∞—à–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—è –õ–ê–¢–ò–ù–°–ö–ò–ú–ò –±—É–∫–≤–∞–º–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ—Å—ã–ª–∫–∏", 
        reply_markup=main_keyboards.cancel_keyboard
    )

    await state.update_data(link_name_number=message.text)
    await states.Fare.NameUser.set()


@dp.message_handler(state=states.Fare.NameUser)
async def nameuser(message: Message, state: FSMContext):
    data = await state.get_data()

    await message.delete()
    await dp.bot.edit_message_text(
        chat_id=message.from_user.id, 
        message_id=data['msg_id'], 
        text="–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏ –õ–ê–¢–ò–ù–°–ö–ò–ú–ò –±—É–∫–≤–∞–º–∏ (—É–ª–∏—Ü–∞, –Ω–æ–º–µ—Ä –¥–æ–º–∞/–∫–≤–∞—Ä—Ç–∏—Ä—ã, –≥–æ—Ä–æ–¥, –æ–±–ª–∞—Å—Ç—å, –∏–Ω–¥–µ–∫—Å). –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞", 
        reply_markup=main_keyboards.cancel_keyboard
    )

    await state.update_data(name_user=message.text)
    await states.Fare.Address.set()


@dp.message_handler(state=states.Fare.Address)
async def address(message: Message, state: FSMContext):
    data = await state.get_data()

    await message.delete()
    await dp.bot.edit_message_text(
        chat_id=message.from_user.id, 
        message_id=data['msg_id'], 
        text="–í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", 
        reply_markup=main_keyboards.cancel_keyboard
    )

    await state.update_data(address=message.text)
    await states.Fare.Phone.set()


@dp.message_handler(state=states.Fare.Phone)
async def phone(message: Message, state: FSMContext):
    data = await state.get_data()

    await message.delete()
    await dp.bot.edit_message_text(
        chat_id=message.from_user.id, 
        message_id=data['msg_id'], 
        text="–ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ (–¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –≤–æ –∏–∑–±–µ–∂–∞–Ω–∏–µ –æ—à–∏–±–∫–∏)", 
        reply_markup=main_keyboards.cancel_keyboard
    )

    await state.update_data(phone=message.text)
    await states.Fare.ModelName.set()


@dp.message_handler(state=states.Fare.ModelName)
async def modelname(message: Message, state: FSMContext):
    data = await state.get_data()

    await message.delete()
    await dp.bot.edit_message_text(
        chat_id=message.from_user.id, 
        message_id=data['msg_id'], 
        text="–¶–≤–µ—Ç –º–æ–¥–µ–ª–∏ (–∫–∞–∫ —É–∫–∞–∑–∞–Ω–æ –Ω–∞ —Å–∞–π—Ç–µ)", 
        reply_markup=main_keyboards.cancel_keyboard
    )

    await state.update_data(model_name=message.text)
    await states.Fare.ModelColor.set()


@dp.message_handler(state=states.Fare.ModelColor)
async def modelcolor(message: Message, state: FSMContext):
    data = await state.get_data()

    await message.delete()
    await dp.bot.edit_message_text(
        chat_id=message.from_user.id, 
        message_id=data['msg_id'], 
        text="–†–∞–∑–º–µ—Ä –º–æ–¥–µ–ª–∏ (–ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ª–∏—á–∏–µ –Ω–∞ —Å–∞–π—Ç–µ!)", 
        reply_markup=main_keyboards.cancel_keyboard
    )

    await state.update_data(model_color=message.text)
    await states.Fare.ModelSize.set()


@dp.message_handler(state=states.Fare.ModelSize)
async def modelsize(message: Message, state: FSMContext):
    data = await state.get_data()

    await message.delete()
    await dp.bot.edit_message_text(
        chat_id=message.from_user.id, 
        message_id=data['msg_id'], 
        text="–°—Ç–æ–∏–º–æ—Å—Ç—å –º–æ–¥–µ–ª–∏ (–≤ –ï–í–†–û!!!), –ø—Ä–æ—Å—Ç–æ —á–∏—Å–ª–æ –±–µ–∑ –¥–æ–ø.—Å–∏–º–≤–æ–ª–æ–≤", 
        reply_markup=main_keyboards.cancel_keyboard
    )

    await state.update_data(model_size=message.text)
    await states.Fare.ModelPrice.set()


@dp.message_handler(state=states.Fare.ModelPrice)
async def modelprice(message: Message, state: FSMContext):
    data = await state.get_data()
    coeff = await quick_commands.select_coeff_4vetka()

    await message.delete()
    try:
        await dp.bot.edit_message_text(
            chat_id=message.from_user.id, 
            message_id=data['msg_id'], 
            text=f"–û–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–∞—è —Å—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ:\n<b>{int(message.text)*coeff}RUB</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∏–∂–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:", 
            reply_markup=main_keyboards.oplata_keyboard
        )
        await state.update_data(bonus=0, euro=message.text, model_price=str(int(message.text)*coeff))
        await states.Fare.Screen.set()

    except ValueError:
        await dp.bot.edit_message_text(
            chat_id=message.from_user.id, 
            message_id=data['msg_id'], 
            text=f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ", 
            reply_markup=main_keyboards.cancel_keyboard
        )
    

@dp.callback_query_handler(text='tinkoff', state=states.Fare.Screen)
async def tinkoff(call: CallbackQuery, state: FSMContext):
    await call.answer()
    text = await quick_commands.select_text_card()
    msg = await call.message.edit_text(
        text=text, 
        reply_markup=main_keyboards.cancel_keyboard,
        parse_mode='html'
    )
    
    await state.update_data(option='–ù–∞ –∫–∞—Ä—Ç—É', msg_id=msg.message_id)


@dp.callback_query_handler(text='SBP', state=states.Fare.Screen)
async def sbp(call: CallbackQuery, state: FSMContext):
    await call.answer()
    text = await quick_commands.select_text_sbp()
    msg = await call.message.edit_text(
        text=text, 
        reply_markup=main_keyboards.cancel_keyboard,
        parse_mode='html'
    )
    
    await state.update_data(option='–°–ë–ü', msg_id=msg.message_id)


@dp.callback_query_handler(text='bonus', state=states.Bosoobuv.Screen)
async def bonus(call: CallbackQuery, state: FSMContext):
    await call.answer()
    user = await quick_commands.select_user(call.from_user.id)
    if user.balance == 0:
        await call.message.edit_text(
            text='–í–∞—à –±–∞–ª–∞–Ω—Å –ø—É—Å—Ç! üòî', 
            reply_markup=main_keyboards.back_keyboard,
            parse_mode='html'
        )
    else:
        await call.message.edit_text(
            text=f'–í–∞—à –±–∞–ª–∞–Ω—Å - {user.balance}RUB\n\n–°–ø–∏—Å–∞—Ç—å –≤ —É—á—ë—Ç –ø–æ–∫—É–ø–∫–∏?', 
            reply_markup=main_keyboards.bonus_keyboard,
            parse_mode='html'
        )


@dp.callback_query_handler(text='back', state=states.Bosoobuv.Screen)
async def modelprice(call: CallbackQuery, state: FSMContext):
    data = await state.get_data()

    await call.message.edit_text(
        text=f"–û–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–∞—è —Å—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ:\n<b>{data['model_price']}RUB</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∏–∂–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:", 
        reply_markup=main_keyboards.oplata_keyboard
    )


@dp.callback_query_handler(text='yes', state=states.Bosoobuv.Screen)
async def modelprice(call: CallbackQuery, state: FSMContext):
    data = await state.get_data()

    user = await quick_commands.select_user(call.from_user.id)
    if user.balance >= int(data['model_price']):
        await quick_commands.update_user_balance(call.from_user.id, user.balance-int(data['model_price']))

        await call.message.edit_text("""–í–∞—à–∏ –±–æ–Ω—É—Å—ã —Å–ø–∏—Å–∞–Ω—ã!\n\n–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º –∏ –ë–ª–∞–≥–æ–î–∞—Ä–∏–º –∑–∞ –ø–æ–∫—É–ø–∫—É. 
üë£ –î–∞–ª–µ–µ –º—ã —Å–¥–µ–ª–∞–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω–æ–µ, —á—Ç–æ–±—ã –í–∞—à –±–æ—Å–æ–Ω–æ–≥–∏–π –ø–∞—Ä–∫ –∫–∞–∫ –º–æ–∂–Ω–æ –±—ã—Å—Ç—Ä–µ–µ –ø–æ–ø–æ–ª–Ω–∏–ª—Å—è –µ—â–µ –æ–¥–Ω–æ–π –ø—Ä–µ–∫—Ä–∞—Å–Ω–æ–π –ø–∞—Ä–æ–π. 
–ù–æ–º–µ—Ä —Ç—Ä–µ–∫–∞ —Å–æ–æ–±—â–∏–º –∑–¥–µ—Å—å –∂–µ.

C –ª—é–±–æ–≤—å—é, –ö–æ–º–∞–Ω–¥–∞ ALL Barefoot""", 
            reply_markup=main_keyboards.to_menu_keyboard
        )

        order = await quick_commands.add_order(
            user_id=call.from_user.id,
            time_created=datetime.now().strftime("%d.%m.%Y %H:%M"),
            link_name_number=data['link_name_number'], 
            name_user=data['name_user'], 
            address=data['address'], 
            phone=data['phone'], 
            model_name=data['model_name'], 
            model_color=data['model_color'], 
            model_size=data['model_size'], 
            model_price=data['model_price'],
            currency='USD',
            screen='–ë–æ–Ω—É—Å—ã',
            bonus=str(data['bonus'])
        )

        coeff = await quick_commands.select_coeff_4vetka()
        worksheet = await check_google_sheets(agcm)
        col1 = await worksheet.col_values(2)
        await worksheet.update_cell(len(col1)+1, 2, datetime.now().strftime("%d.%m.%Y %H:%M"))
        await worksheet.update_cell(len(col1)+1, 3, order.id)
        await worksheet.update_cell(len(col1)+1, 4, data['name_user'])
        await worksheet.update_cell(len(col1)+1, 5, data['address'])
        await worksheet.update_cell(len(col1)+1, 6, data['phone'])
        await worksheet.update_cell(len(col1)+1, 8, data['link_name_number'])
        await worksheet.update_cell(len(col1)+1, 9, data['model_name'])
        await worksheet.update_cell(len(col1)+1, 10, data['model_color'])
        await worksheet.update_cell(len(col1)+1, 11, data['model_size'])
        await worksheet.update_cell(len(col1)+1, 13, data['euro'])
        await worksheet.update_cell(len(col1)+1, 14, coeff)
        await worksheet.update_cell(len(col1)+1, 15, int(data['euro'])*coeff)
        await worksheet.update_cell(len(col1)+1, 16, data['bonus'])
        if call.from_user.username is not None:
            await worksheet.update_cell(len(col1)+1, 23, f't.me/{call.from_user.username}')
        await worksheet.update_cell(len(col1)+1, 24, call.from_user.id)
        await worksheet.update_cell(len(col1)+1, 25, '–ë–æ–Ω—É—Å—ã')

        await state.finish()

    else:

        await call.message.edit_text( 
            text=f"–í–∞—à–∏ –±–æ–Ω—É—Å—ã —Å–ø–∏—Å–∞–Ω—ã!", 
            reply_markup=main_keyboards.back_keyboard
        )

        await state.update_data(model_price=str(int(data['model_price'])-user.balance))
        await quick_commands.update_user_balance(0)


@dp.callback_query_handler(text='crypto', state=states.Fare.Screen)
async def crypto(call: CallbackQuery, state: FSMContext):
    data = await state.get_data()

    amount = int(data['model_price'])

    price = convert_currency_yahoofin('RUB', "USD", amount)
    price = round(price, 2)

    payment = Payment(price)
    link = await payment.init
    uuid = payment.uuid
    await state.update_data(uuid=uuid, link=link, amount=price)
    markup = await order_keyboards.markup_pay(link)

    await call.message.edit_text('''üí∏ –í–∞—à–∞ —Å—Å—ã–ª–∫–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã: {link}

–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: ~ ${price}
–°—Å—ã–ª–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ 2-—Ö —á–∞—Å–æ–≤.

‚ö†Ô∏è –í–ê–ñ–ù–û! –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—É–º–º—É –Ω–µ –º–µ–Ω—å—à–µ —É–∫–∞–∑–∞–Ω–Ω–æ–π, –∏–Ω–∞—á–µ –≤—ã –Ω–µ –ø–æ–ª—É—á–∏—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã. –ó–∞–∫–ª–∞–¥—ã–≤–∞–π—Ç–µ —Ä–∞—Å—Ö–æ–¥—ã –Ω–∞ –∫–æ–º–∏—Å—Å–∏—é.'''.format(link=link, price=price), reply_markup=markup)


@dp.callback_query_handler(text='paid', state=states.Fare.Screen)
async def paid(call: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    payment = Payment(uuid=data['uuid'], amount=data['amount'])
    user = await quick_commands.select_user(call.from_user.id)

    status = await payment.check_payment()
    try:
        if status == 'created':
            await call.answer('‚ùå –û–ø–ª–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!', show_alert=True)
        elif status == 'partial':
            await call.answer('‚ö†Ô∏è –í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –æ–ø–ª–∞—Ç—ã, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—â–µ!', show_alert=True)
        elif status == 'paid':
            await call.message.edit_text("""–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º –∏ –ë–ª–∞–≥–æ–î–∞—Ä–∏–º –∑–∞ –ø–æ–∫—É–ø–∫—É. 
üë£ –î–∞–ª–µ–µ –º—ã —Å–¥–µ–ª–∞–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω–æ–µ, —á—Ç–æ–±—ã –í–∞—à –±–æ—Å–æ–Ω–æ–≥–∏–π –ø–∞—Ä–∫ –∫–∞–∫ –º–æ–∂–Ω–æ –±—ã—Å—Ç—Ä–µ–µ –ø–æ–ø–æ–ª–Ω–∏–ª—Å—è –µ—â–µ –æ–¥–Ω–æ–π –ø—Ä–µ–∫—Ä–∞—Å–Ω–æ–π –ø–∞—Ä–æ–π. 
–ù–æ–º–µ—Ä —Ç—Ä–µ–∫–∞ —Å–æ–æ–±—â–∏–º –∑–¥–µ—Å—å –∂–µ.

C –ª—é–±–æ–≤—å—é, –ö–æ–º–∞–Ω–¥–∞ ALL Barefoot""", 
                reply_markup=main_keyboards.to_menu_keyboard
            )

            order = await quick_commands.add_order(
                user_id=call.from_user.id,
                time_created=datetime.now().strftime("%d.%m.%Y %H:%M"),
                link_name_number=data['link_name_number'], 
                name_user=data['name_user'], 
                address=data['address'], 
                phone=data['phone'], 
                model_name=data['model_name'], 
                model_color=data['model_color'], 
                model_size=data['model_size'], 
                model_price=data['model_price'],
                currency='USD',
                screen='–ß–µ—Ä–µ–∑ –∫—Ä–∏–ø—Ç—É',
                bonus=str(data['bonus'])
            )

            coeff = await quick_commands.select_coeff_4vetka()
            setts = await quick_commands.select_settings()
            percent = setts.percent

            user = await quick_commands.select_user(call.from_user.id)
            if user.referer is not None:
                referer = await quick_commands.select_user(user.referer)
                await quick_commands.update_user_balance(user.referer, referer.balance+round(int(data['euro'])*coeff*percent/100))            

            worksheet = await check_google_sheets(agcm)
            col1 = await worksheet.col_values(2)
            await worksheet.update_cell(len(col1)+1, 2, datetime.now().strftime("%d.%m.%Y %H:%M"))
            await worksheet.update_cell(len(col1)+1, 3, order.id)
            await worksheet.update_cell(len(col1)+1, 4, data['name_user'])
            await worksheet.update_cell(len(col1)+1, 5, data['address'])
            await worksheet.update_cell(len(col1)+1, 6, data['phone'])
            await worksheet.update_cell(len(col1)+1, 8, data['link_name_number'])
            await worksheet.update_cell(len(col1)+1, 9, data['model_name'])
            await worksheet.update_cell(len(col1)+1, 10, data['model_color'])
            await worksheet.update_cell(len(col1)+1, 11, data['model_size'])
            await worksheet.update_cell(len(col1)+1, 13, data['euro'])
            await worksheet.update_cell(len(col1)+1, 14, coeff)
            await worksheet.update_cell(len(col1)+1, 15, int(data['euro'])*coeff)
            await worksheet.update_cell(len(col1)+1, 16, data['bonus'])
            if call.from_user.username is not None:
                await worksheet.update_cell(len(col1)+1, 23, f't.me/{call.from_user.username}')
            await worksheet.update_cell(len(col1)+1, 24, call.from_user.id)
            await worksheet.update_cell(len(col1)+1, 25, '–ö—Ä–∏–ø—Ç–∞')

            await state.finish()

    except Exception as err:
        await dp.bot.send_message(admin_id[0], f'{status}')
        await dp.bot.send_message(admin_id[0], f'{err}')


@dp.message_handler(state=states.Fare.Screen, content_types=ContentType.PHOTO)
async def photo_screen(message: Message, state: FSMContext):
    data = await state.get_data()

    await dp.bot.delete_message(chat_id=message.from_user.id, message_id=data['msg_id'])
    await message.delete()

    await message.answer(
        text=f"""–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º –∏ –ë–ª–∞–≥–æ–î–∞—Ä–∏–º –∑–∞ –ø–æ–∫—É–ø–∫—É. 
üë£ –î–∞–ª–µ–µ –º—ã —Å–¥–µ–ª–∞–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω–æ–µ, —á—Ç–æ–±—ã –í–∞—à –±–æ—Å–æ–Ω–æ–≥–∏–π –ø–∞—Ä–∫ –∫–∞–∫ –º–æ–∂–Ω–æ –±—ã—Å—Ç—Ä–µ–µ –ø–æ–ø–æ–ª–Ω–∏–ª—Å—è –µ—â–µ –æ–¥–Ω–æ–π –ø—Ä–µ–∫—Ä–∞—Å–Ω–æ–π –ø–∞—Ä–æ–π. 
–ù–æ–º–µ—Ä —Ç—Ä–µ–∫–∞ —Å–æ–æ–±—â–∏–º –∑–¥–µ—Å—å –∂–µ.

C –ª—é–±–æ–≤—å—é, –ö–æ–º–∞–Ω–¥–∞ ALL Barefoot""", 
        reply_markup=main_keyboards.to_menu_keyboard
    )

    order = await quick_commands.add_order(
        user_id=message.from_user.id,
        time_created=datetime.now().strftime("%d.%m.%Y %H:%M"),
        link_name_number=data['link_name_number'], 
        name_user=data['name_user'], 
        address=data['address'], 
        phone=data['phone'], 
        model_name=data['model_name'], 
        model_color=data['model_color'], 
        model_size=data['model_size'], 
        model_price=data['model_price'],
        currency='EUR',
        screen=message.photo[-1].file_id,
        bonus=str(data['bonus'])
    )

    await dp.bot.send_photo(admin_id[1], message.photo[-1].file_id, f'–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: {order.id}\n–ò–º—è: {data["name_user"]}\n–ö –æ–ø–ª–∞—Ç–µ: {data["model_price"]}RUB\n–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: {data["option"]}')

    coeff = await quick_commands.select_coeff_4vetka()
    setts = await quick_commands.select_settings()
    percent = setts.percent

    user = await quick_commands.select_user(message.from_user.id)
    if user.referer is not None:
        referer = await quick_commands.select_user(user.referer)
        await quick_commands.update_user_balance(user.referer, referer.balance+round(int(data['euro'])*coeff*percent/100))

    worksheet = await check_google_sheets(agcm)
    col1 = await worksheet.col_values(2)
    await worksheet.update_cell(len(col1)+1, 2, datetime.now().strftime("%d.%m.%Y %H:%M"))
    await worksheet.update_cell(len(col1)+1, 3, order.id)
    await worksheet.update_cell(len(col1)+1, 4, data['name_user'])
    await worksheet.update_cell(len(col1)+1, 5, data['address'])
    await worksheet.update_cell(len(col1)+1, 6, data['phone'])
    await worksheet.update_cell(len(col1)+1, 8, data['link_name_number'])
    await worksheet.update_cell(len(col1)+1, 9, data['model_name'])
    await worksheet.update_cell(len(col1)+1, 10, data['model_color'])
    await worksheet.update_cell(len(col1)+1, 11, data['model_size'])
    await worksheet.update_cell(len(col1)+1, 13, data['euro'])
    await worksheet.update_cell(len(col1)+1, 14, coeff)
    await worksheet.update_cell(len(col1)+1, 15, int(data['euro'])*coeff)
    await worksheet.update_cell(len(col1)+1, 16, data['bonus'])
    if message.from_user.username is not None:
        await worksheet.update_cell(len(col1)+1, 23, f't.me/{message.from_user.username}')
    await worksheet.update_cell(len(col1)+1, 24, message.from_user.id)
    await worksheet.update_cell(len(col1)+1, 25, f"t.me/allbarefoot_bot?start=screen{order.id}")


# ----------------------------- –û –¢ –ü –† –ê –í –ò –¢ –¨   –¢ –† –ï –ö -----------------------------


@dp.callback_query_handler(text_contains='sendtrack_')
async def sendtrack(call: CallbackQuery, state: FSMContext):
    user_id = call.data.split('_')[1] 

    msg = await call.message.edit_text('–ü—Ä–∏—à–ª–∏—Ç–µ —Ç—Ä–µ–∫ —ç—Ç–æ–≥–æ –∑–∞–∫–∞–∑–∞, —á—Ç–æ–±—ã –ø–µ—Ä–µ—Å–ª–∞—Ç—å –µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é')
    await state.update_data(user_id=user_id, msg_id=msg.message_id)
    await states.Command.SendTrack.set()


@dp.message_handler(state=states.Command.SendTrack)
async def photo_screen(message: Message, state: FSMContext):
    data = await state.get_data()

    await dp.bot.send_message(int(data['user_id']), f'–¢—Ä–µ–∫ –∑–∞–∫–∞–∑–∞:\n\n<code>{message.text}</code>', parse_mode='html')
    await message.delete()
    await dp.bot.edit_message_text(
        chat_id=message.from_user.id, 
        message_id=int(data['msg_id']), 
        text="–¢—Ä–µ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω"
    )

    await state.finish()


# ------------------------------- –ü –ê –† –¢ –ù –Å –† –ö –ê -------------------------------------


@dp.callback_query_handler(text='partnerka')
async def partnerka(call: CallbackQuery, state: FSMContext):
    await call.answer()
    user = await quick_commands.select_user(call.from_user.id)
    all_users = await quick_commands.select_all_users()

    referals = 0
    money = 0
    balance = user.balance
    zarabotok = user.zarabotok
    setts = await quick_commands.select_settings()
    percent = setts.percent
    if user.percent is not None:
        percent = user.percent
    for i in range(len(all_users)):
        if all_users[i].referer == call.from_user.id:
            referals += 1

    orders = await quick_commands.select_orders_by_user_id(call.from_user.id)


    text=f"""<b>ü§ù –ü–∞—Ä—Ç–Ω—ë—Ä—Å–∫–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞</b>

–ó–æ–≤–∏—Ç–µ –¥—Ä—É–∑–µ–π –∏ <b>–ø–æ–ª—É—á–∞–π—Ç–µ %</b> –æ—Ç –∏—Ö –ø–æ–∫—É–ø–æ–∫ –Ω–∞ –±–æ–Ω—É—Å–Ω—ã–π —Å—á—ë—Ç.
–ë–æ–Ω—É—Å—ã –º–æ–∂–Ω–æ —Ç—Ä–∞—Ç–∏—Ç—å –Ω–∞ –ø–æ–∫—É–ø–∫–∏.

https://telegra.ph/PARTNYORSKAYA-PROGRAMMA-01-31

üññ <b>–í—ã –ø—Ä–∏–≥–ª–∞—Å–∏–ª–∏:</b> {referals} —á–µ–ª.
üí∞ <b>–í—ã –∑–∞—Ä–∞–±–æ—Ç–∞–ª–∏:</b> {zarabotok}RUB
üçè <b>–ë–∞–ª–∞–Ω—Å –±–∞–ª–ª–æ–≤:</b> {balance}RUB
üíØ <b>–í–∞—à –ø—Ä–æ—Ü–µ–Ω—Ç –æ—Ç –ø–æ–∫—É–ø–æ–∫:</b> {percent}%"""

    if (user.bloger == True) or (len(orders) > 0):
        text += f"""\n\nüëá <b>–í–∞—à–∞ —Å—Å—ã–ª–∫–∞ –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π:</b>

<code>t.me/allbarefoot_bot?start={call.from_user.id}</code>

(–Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω–µ—ë, —á—Ç–æ–±—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å)"""

    await call.message.edit_text(
        text, 
        reply_markup=main_keyboards.to_menu_keyboard, 
        parse_mode='html'
    )


# ---------------------------- –ò –° –¢ –û –† –ò –Ø   –ó –ê –ö –ê –ó –û –í -------------------------------


@dp.callback_query_handler(text='my_orders')
async def partnerka(call: CallbackQuery, state: FSMContext):
    await call.answer()
    orders = await quick_commands.select_orders_by_user_id(call.from_user.id)
    if len(orders) == 0:
        await call.message.edit_text(
            text=f"""–ó–∞–∫–∞–∑–æ–≤ –µ—â—ë –Ω–µ –±—ã–ª–æ""", 
            reply_markup=main_keyboards.to_menu_keyboard, 
            parse_mode='html'
        )
    else:
        markup = await main_keyboards.orders_keyboard(call.from_user.id)
        await call.message.edit_text(
            text=f"""üíö <b>–ö–æ–ª-–≤–æ –∑–∞–∫–∞–∑–æ–≤:</b> {len(orders)}\n\n<b>–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤ üëá</b>""", 
            reply_markup=markup, 
            parse_mode='html'
        )


@dp.callback_query_handler(text_contains='order;')
async def partnerka(call: CallbackQuery, state: FSMContext):
    await call.answer()
    order_id = int(call.data.split(';')[1])
    order = await quick_commands.select_order(order_id)
    await call.message.answer(
        f'''<b>‚Ññ{order_id}</b> | üíö | {order.time_created}


<b>–°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞:</b>
<b>–ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏:</b> {order.model_name}
<b>–¶–≤–µ—Ç:</b> {order.model_color}
<b>–†–∞–∑–º–µ—Ä:</b> {order.model_size}
<b>–¶–µ–Ω–∞:</b> {order.model_price} RUB

<b>–ò–º—è:</b> {order.name_user}
<b>–ê–¥—Ä–µ—Å:</b> {order.address}
<b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {order.phone}''', reply_markup=main_keyboards.close_keyboard)


@dp.callback_query_handler(text='xxx')
async def partnerka(call: CallbackQuery, state: FSMContext):
    await call.answer()


# ------------------------------------------------------------------------------------

@dp.callback_query_handler(text='service_info')
async def partnerka(call: CallbackQuery, state: FSMContext):
    await call.answer()
    text = '''<b>ALLBarefoot —ç—Ç–æ –µ–≤—Ä–æ–ø–µ–π—Å–∫–∞—è –±–æ—Å–æ–Ω–æ–≥–∞—è –æ–±—É–≤—å –ø–æ —Ü–µ–Ω–∞–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è, –±–µ–∑ –ø–µ—Ä–µ–ø–ª–∞—Ç. 
–°—Ç–æ–∏–º–æ—Å—Ç—å –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–∞—è, –≤–∫–ª—é—á–∞–µ—Ç –¥–æ—Å—Ç–∞–≤–∫—É, –Ω–∏–∫–∞–∫–∏—Ö –¥–æ–ø–ª–∞—Ç –ø–æ—Å–ª–µ. –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞ –∏ –æ–≥—Ä–æ–º–Ω—ã–π –≤—ã–±–æ—Ä.

–ö–ê–ö –†–ê–ë–û–¢–ê–ï–¢</b> –ß–ê–¢-–ë–û–¢ ALLBarefootüë£

üõí –°–æ–∑–¥–∞–µ—Ç–µ –∑–∞–∫–∞–∑ –ø—Ä—è–º–æ –≤ –±–æ—Ç–µ
‚Üì
üìÆ –í–≤–æ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏ (<i>—Ç–∞–º–æ–∂–µ–Ω–Ω–∞—è –¥–µ–∫–ª–∞—Ä–∞—Ü–∏—è ‚Äî –Ω–∞—à–∞ –∑–∞–±–æ—Ç–∞</i>)
‚Üì
üí∞–ë–æ—Ç —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç—å (<i>–∏–ª–∏ –≤–≤–æ–¥–∏—Ç–µ –∏–∑ —Å–ø–µ—Ü.–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è</i>)
‚Üì
üí≥ –û–ø–ª–∞—á–∏–≤–∞–µ—Ç–µ –≤ —Ä—É–±–ª—è—Ö –°–ë–ü, –¢–∏–Ω—å–∫–æ—Ñ –∏–ª–∏ USDT –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–æ–π
‚Üì
üì§ –°–ø—É—Å—Ç—è 3-7 –¥–Ω–µ–π –ø–æ–ª—É—á–∞–µ—Ç–µ –∑–¥–µ—Å—å –∂–µ —Ç—Ä–µ–∫ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
‚Üì
üì¶ –ó–∞–±–∏—Ä–∞–µ—Ç–µ –ø–æ—Å—ã–ª–∫—É –≤ –ø–æ—á—Ç–æ–≤–æ–º –æ—Ç–¥–µ–ª–µ–Ω–∏–∏
<b>–ü—Ä–∏–º–µ—Ä–Ω—ã–π —Å—Ä–æ–∫ –¥–æ—Å—Ç–∞–≤–∫–∏: 3-4 –Ω–µ–¥–µ–ª–∏</b>
<a href="https://telegra.ph/Bazovaya-informaciya-01-31">–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ–± —É—Å–ª–æ–≤–∏—è—Ö –∑–∞–∫–∞–∑–∞ —Ç—É—Ç.</a>

üì£<b>–í—Å–µ –≥–ª–∞–≤–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏, –∞–∫—Ü–∏–∏ –∏ –∑–∞–∫—É–ø–∫–∏ –≤</b> <a href="https://t.me/allbarefoot">–Ω–∞—à–µ–º –¢–ì –∫–∞–Ω–∞–ª–µ</a>. –ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è!
ü§ù–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –±–æ—Å–æ–Ω–æ–≥–æ–º—É —Å–æ–æ–±—â–µ—Å—Ç–≤—É, —É–≤–∏–¥–µ—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ, –∑–∞–º–µ—Ä—ã, <b>–æ–ø—ã—Ç –∏ —Å–æ–≤–µ—Ç—ã –±—ã–≤–∞–ª—ã—Ö</b> <a href="https://t.me/allbarefoot_ru">–º–æ–∂–Ω–æ –¢–£–¢.</a>'''

    await call.message.edit_text(text, reply_markup=main_keyboards.to_menu_keyboard, parse_mode='html', disable_web_page_preview=True)