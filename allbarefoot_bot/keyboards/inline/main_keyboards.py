from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from utils.db_api import quick_commands


back_keyboard = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="–ù–∞–∑–∞–¥ üîô", callback_data='back')]])


to_menu_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚Ü©Ô∏è", callback_data='menu')]
])

to_menu_keyboard_add_order = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚Ü©Ô∏è", callback_data='menu_order')]
])


async def tracking_keyboard(user_id):
        markup = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç—Ä–µ–∫ ‚ÑπÔ∏è", callback_data=f'sendtrack_{user_id}')]
        ])
        return markup


async def user_info_keyboard(user_id, name):
        markup = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text=f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ üôÇ", callback_data=f'info_{user_id}_{name}')],
                [InlineKeyboardButton(text=f"–ò—Å—Ç–æ—Ä–∏—è –ø–µ—Ä–µ–ø–∏—Å–∫–∏ üìù", callback_data=f'doc_{user_id}')],
                [InlineKeyboardButton(text=f"–ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥ ‚ùé", callback_data=f'close_dialog')]

        ])
        return markup


async def texts_keyboard():
        settings = await quick_commands.select_settings()
        buttons = []

        if settings.button1_active == True:
                buttons.append([InlineKeyboardButton(text=f"–£—Å–ª–æ–≤–∏—è {settings.button_1vetka}", callback_data='text1vetka')])
        if settings.button2_active == True:
                buttons.append([InlineKeyboardButton(text=f"–£—Å–ª–æ–≤–∏—è {settings.button_2vetka}", callback_data='text2vetka')])
        if settings.button3_active == True:
                buttons.append([InlineKeyboardButton(text=f"–£—Å–ª–æ–≤–∏—è {settings.button_3vetka}", callback_data='text3vetka')])
        if settings.button4_active == True:
                buttons.append([InlineKeyboardButton(text=f"–£—Å–ª–æ–≤–∏—è {settings.button_4vetka}", callback_data='text4vetka')])
        
        buttons.append([InlineKeyboardButton(text="–¢–µ–∫—Å—Ç –ö–ê–†–¢–ê –¢–ò–ù–¨–ö–û–§–§", callback_data='textcard')])
        buttons.append([InlineKeyboardButton(text="–¢–µ–∫—Å—Ç –°–ë–ü", callback_data='textsbp')])
        buttons.append([InlineKeyboardButton(text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚Ü©Ô∏è", callback_data='menu')])
        markup = InlineKeyboardMarkup(inline_keyboard=buttons)
        return markup


async def buttons_keyboard():
        settings = await quick_commands.select_settings()
        buttons = []

        if settings.button1_active == True:
                buttons.append([InlineKeyboardButton(text=f"–ò–∑–º–µ–Ω–∏—Ç—å {settings.button_1vetka}", callback_data='button1vetka')])
        if settings.button2_active == True:
                buttons.append([InlineKeyboardButton(text=f"–ò–∑–º–µ–Ω–∏—Ç—å {settings.button_2vetka}", callback_data='button2vetka')])
        if settings.button3_active == True:
                buttons.append([InlineKeyboardButton(text=f"–ò–∑–º–µ–Ω–∏—Ç—å {settings.button_3vetka}", callback_data='button3vetka')])
        if settings.button4_active == True:
                buttons.append([InlineKeyboardButton(text=f"–ò–∑–º–µ–Ω–∏—Ç—å {settings.button_4vetka}", callback_data='button4vetka')])
        
        buttons.append([InlineKeyboardButton(text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚Ü©Ô∏è", callback_data='menu')])
        markup = InlineKeyboardMarkup(inline_keyboard=buttons)
        return markup


async def close_buttons_keyboard():
        settings = await quick_commands.select_settings()
        buttons = []

        if settings.button1_active == True:
                buttons.append([InlineKeyboardButton(text=f"{settings.button_1vetka}", callback_data='button1_close')])
        if settings.button2_active == True:
                buttons.append([InlineKeyboardButton(text=f"{settings.button_2vetka}", callback_data='button2_close')])
        if settings.button3_active == True:
                buttons.append([InlineKeyboardButton(text=f"{settings.button_3vetka}", callback_data='button3_close')])
        if settings.button4_active == True:
                buttons.append([InlineKeyboardButton(text=f"{settings.button_4vetka}", callback_data='button4_close')])
        
        buttons.append([InlineKeyboardButton(text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚Ü©Ô∏è", callback_data='menu')])
        markup = InlineKeyboardMarkup(inline_keyboard=buttons)
        return markup


async def open_buttons_keyboard():
        settings = await quick_commands.select_settings()
        buttons = []

        if settings.button1_active == False:
                buttons.append([InlineKeyboardButton(text=f"{settings.button_1vetka}", callback_data='button1_open')])
        if settings.button2_active == False:
                buttons.append([InlineKeyboardButton(text=f"{settings.button_2vetka}", callback_data='button2_open')])
        if settings.button3_active == False:
                buttons.append([InlineKeyboardButton(text=f"{settings.button_3vetka}", callback_data='button3_open')])
        if settings.button4_active == False:
                buttons.append([InlineKeyboardButton(text=f"{settings.button_4vetka}", callback_data='button4_open')])
        
        buttons.append([InlineKeyboardButton(text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚Ü©Ô∏è", callback_data='menu')])
        markup = InlineKeyboardMarkup(inline_keyboard=buttons)
        return markup


VIP_menu_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–†–∞—Å—Å—ã–ª–∫–∞ ‚úâÔ∏è ", callback_data='mailing'),
        InlineKeyboardButton(text="üìó Excel", callback_data='excel')],
        [InlineKeyboardButton(text="–û—Ç–∑—ã–≤—ã ‚ÑπÔ∏è", callback_data='feedbacks_VIP'),
        InlineKeyboardButton(text="–ù–∞–ø–∏—Å–∞—Ç—å –æ—Ç–∑—ã–≤ ‚úçÔ∏è", callback_data='writefeedback')],
        [InlineKeyboardButton(text="–û–¥–æ–±—Ä–∏—Ç—å –æ—Ç–∑—ã–≤—ã ‚úÖ", callback_data='check_feedbacks'),
        InlineKeyboardButton(text="–°–º–µ–Ω–∏—Ç—å –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç", callback_data='coeffs')],
        [InlineKeyboardButton(text="–°–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç", callback_data='change_texts'),
        InlineKeyboardButton(text="–°–º–µ–Ω–∏—Ç—å –∫–Ω–æ–ø–∫–∏", callback_data='change_buttons')],
        [InlineKeyboardButton(text="–í–∫–ª/–≤—ã–∫–ª –∫–Ω–æ–ø–∫–∏", callback_data='close_buttons'),
        InlineKeyboardButton(text="–°–º–µ–Ω–∏—Ç—å %", callback_data='change_percent')],
        [InlineKeyboardButton(text="–°–≤—è–∑–∞—Ç—å—Å—è —Å –∫–ª–∏–µ–Ω—Ç–æ–º ‚öôÔ∏è", callback_data='support_2')]

])


close_open_buttons_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–í–∫–ª—é—á–∏—Ç—å ‚úÖ", callback_data='open'),
        InlineKeyboardButton(text="–í—ã–∫–ª—é—á–∏—Ç—å ‚ùå", callback_data='close')],
        [InlineKeyboardButton(text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚Ü©Ô∏è", callback_data='menu')]
])


async def coeffs_keyboard():
        settings = await quick_commands.select_settings()
        markup = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text=f"–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç {settings.button_2vetka}", callback_data='coeff_2')],
                [InlineKeyboardButton(text=f"–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç {settings.button_3vetka}", callback_data='coeff_3')],
                [InlineKeyboardButton(text=f"–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç {settings.button_4vetka}", callback_data='coeff_4')],
                [InlineKeyboardButton(text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚Ü©Ô∏è", callback_data='menu')]
        ])
        return markup


async def menu_keyboard():
        settings = await quick_commands.select_settings()
        buttons = []

        if settings.button1_active == True:
                buttons.append([InlineKeyboardButton(text=settings.button_1vetka, callback_data='belenka_sale')])
        if settings.button2_active == True:
                buttons.append([InlineKeyboardButton(text=settings.button_2vetka, callback_data='bosoobuv')])
        if settings.button3_active == True:
                buttons.append([InlineKeyboardButton(text=settings.button_3vetka, callback_data='littleshoes')])
        if settings.button4_active == True:
                buttons.append([InlineKeyboardButton(text=settings.button_4vetka, callback_data='fare')])
        
        buttons.append([InlineKeyboardButton(text="–ù–∞–ø–∏—Å–∞—Ç—å –æ—Ç–∑—ã–≤ ‚úçÔ∏è", callback_data='writefeedback'),
                InlineKeyboardButton(text="–û—Ç–∑—ã–≤—ã ‚ÑπÔ∏è", callback_data='feedbacks')])
        buttons.append([InlineKeyboardButton(text="–ü–∞—Ä—Ç–Ω—ë—Ä–∫–∞ ü§ù", callback_data='partnerka'),
                InlineKeyboardButton(text="–¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞ ‚öôÔ∏è", callback_data='support')])
        buttons.append([InlineKeyboardButton(text="–ú–æ–∏ –∑–∞–∫–∞–∑—ã üóÉ", callback_data='my_orders')])
        buttons.append([InlineKeyboardButton(text="–û —Å–µ—Ä–≤–∏—Å–µ ‚ÑπÔ∏è", callback_data='service_info')])

        markup = InlineKeyboardMarkup(inline_keyboard=buttons)
        return markup


async def orders_keyboard(user_id):
        orders = await quick_commands.select_orders_by_user_id(user_id)
        lst_buttons = [[InlineKeyboardButton(text=f"‚Ññ | üíö | —Å–æ–∑–¥–∞–Ω", callback_data='xxx')]]
        for order in orders:
                lst_buttons.append([InlineKeyboardButton(text=f"{order.id} | üíö | {order.time_created}", callback_data=f'order;{order.id}')])
        lst_buttons.append([InlineKeyboardButton(text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚Ü©Ô∏è", callback_data='menu')])
        markup = InlineKeyboardMarkup(inline_keyboard=lst_buttons)
        return markup


async def orders_keyboard_without_menu(user_id):
        orders = await quick_commands.select_orders_by_user_id(user_id)
        lst_buttons = [[InlineKeyboardButton(text=f"‚Ññ | üíö | —Å–æ–∑–¥–∞–Ω", callback_data='xxx')]]
        for order in orders:
                lst_buttons.append([InlineKeyboardButton(text=f"{order.id} | üíö | {order.time_created}", callback_data=f'order;{order.id}')])
        lst_buttons.append([InlineKeyboardButton(text="–ó–∞–∫—Ä—ã—Ç—å ‚ùå", callback_data='close_info')])
        markup = InlineKeyboardMarkup(inline_keyboard=lst_buttons)
        return markup



mailing_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É ‚ùì", callback_data='test')],
        [InlineKeyboardButton(text="–†–∞–∑–æ—Å–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É üì®", callback_data='send')],
        [InlineKeyboardButton(text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚Ü©Ô∏è", callback_data='menu')]
])


skip_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≤–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ ‚ñ∂Ô∏è", callback_data='skip')],
        [InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞ üö´", callback_data='cancel')]
])


cancel_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞ üö´", callback_data='cancel')]
])


oplata_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ù–∞ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –¢–∏–Ω—å–∫–æ—Ñ—Ñ", callback_data='tinkoff')],
        [InlineKeyboardButton(text="–ß–µ—Ä–µ–∑ –°–ë–ü", callback_data='SBP')],
        [InlineKeyboardButton(text="–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–æ–π", callback_data='crypto')],
        [InlineKeyboardButton(text="–°–ø–∏—Å–∞—Ç—å –±–æ–Ω—É—Å—ã ü§©", callback_data='bonus')],
        [InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞ üö´", callback_data='cancel')]
])

bonus_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text='–î–ê! ü•∞', callback_data='yes')],
        [InlineKeyboardButton(text="–ù–∞–∑–∞–¥ üîô", callback_data='back')]
])

slider_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚óÄÔ∏è", callback_data='minus'),
        InlineKeyboardButton(text="‚ñ∂Ô∏è", callback_data='plus')],
        [InlineKeyboardButton(text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚Ü©Ô∏è", callback_data='menu')]
])


slider_keyboard_VIP = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚óÄÔ∏è", callback_data='minus_VIP'),
        InlineKeyboardButton(text="‚ñ∂Ô∏è", callback_data='plus_VIP')],
        [InlineKeyboardButton(text="–°–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é", callback_data='change_photo')],
        [InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å ‚ùå", callback_data='not_confirm'),
        InlineKeyboardButton(text="–û–¥–æ–±—Ä–∏—Ç—å ‚úÖ", callback_data='confirm')],
        [InlineKeyboardButton(text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚Ü©Ô∏è", callback_data='menu')]
])


confirm_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞ ‚ùå", callback_data='not_confirm'),
        InlineKeyboardButton(text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å ‚úÖ", callback_data='confirm')],
])


async def confirm_keyboard_transaction(msg_id, user_id):
        markup  = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞ ‚ùå", callback_data=f'not_confirm_{msg_id}_{user_id}'),
                InlineKeyboardButton(text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å ‚úÖ", callback_data=f'confirm_{msg_id}_{user_id}')],
        ])
        return markup


slider_keyboard_VIP_2 = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚óÄÔ∏è", callback_data='minus_VIP_2'),
        InlineKeyboardButton(text="‚ñ∂Ô∏è", callback_data='plus_VIP_2')],
        [InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å –æ—Ç–∑—ã–≤ ‚ùå", callback_data='not_confirm_2')],
        [InlineKeyboardButton(text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚Ü©Ô∏è", callback_data='menu')]
])


slider_keyboard_VIP_empty = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –æ—Ç–∑—ã–≤–∞–º", callback_data='check_feedbacks_again')],
        [InlineKeyboardButton(text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚Ü©Ô∏è", callback_data='menu')]
])


slider_keyboard_VIP_empty_2 = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –æ—Ç–∑—ã–≤–∞–º", callback_data='check_feedbacks_again_2')],
        [InlineKeyboardButton(text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚Ü©Ô∏è", callback_data='menu')]
])


backtomenu_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚Ü©Ô∏è", callback_data='menu')]
])

backtomenu_del_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚Ü©Ô∏è", callback_data='menu_del')]
])

close_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ó–∞–∫—Ä—ã—Ç—å ‚ùå", callback_data='close_info')]
])